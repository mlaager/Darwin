// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_audio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5faudio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5faudio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5faudio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5faudio_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5faudio_2eproto;
namespace proto {
class ClientAudio;
struct ClientAudioDefaultTypeInternal;
extern ClientAudioDefaultTypeInternal _ClientAudio_default_instance_;
class MusicQueue;
struct MusicQueueDefaultTypeInternal;
extern MusicQueueDefaultTypeInternal _MusicQueue_default_instance_;
class SoundQueue;
struct SoundQueueDefaultTypeInternal;
extern SoundQueueDefaultTypeInternal _SoundQueue_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ClientAudio* Arena::CreateMaybeMessage<::proto::ClientAudio>(Arena*);
template<> ::proto::MusicQueue* Arena::CreateMaybeMessage<::proto::MusicQueue>(Arena*);
template<> ::proto::SoundQueue* Arena::CreateMaybeMessage<::proto::SoundQueue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum AudioMusicEnum : int {
  AUDIO_MUSIC_NONE = 0,
  AUDIO_MUSIC_TITLE = 1,
  AUDIO_MUSIC_MENU = 2,
  AUDIO_MUSIC_PLAY = 3,
  AUDIO_MUSIC_DEATH = 4,
  AUDIO_MUSIC_WIN = 5,
  AudioMusicEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AudioMusicEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AudioMusicEnum_IsValid(int value);
constexpr AudioMusicEnum AudioMusicEnum_MIN = AUDIO_MUSIC_NONE;
constexpr AudioMusicEnum AudioMusicEnum_MAX = AUDIO_MUSIC_WIN;
constexpr int AudioMusicEnum_ARRAYSIZE = AudioMusicEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioMusicEnum_descriptor();
template<typename T>
inline const std::string& AudioMusicEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioMusicEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioMusicEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioMusicEnum_descriptor(), enum_t_value);
}
inline bool AudioMusicEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioMusicEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioMusicEnum>(
    AudioMusicEnum_descriptor(), name, value);
}
enum AudioSoundEnum : int {
  AUDIO_SOUND_NONE = 0,
  AUDIO_SOUND_JUMP = 1,
  AUDIO_SOUND_GOOD = 2,
  AUDIO_SOUND_BAD = 3,
  AudioSoundEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AudioSoundEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AudioSoundEnum_IsValid(int value);
constexpr AudioSoundEnum AudioSoundEnum_MIN = AUDIO_SOUND_NONE;
constexpr AudioSoundEnum AudioSoundEnum_MAX = AUDIO_SOUND_BAD;
constexpr int AudioSoundEnum_ARRAYSIZE = AudioSoundEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioSoundEnum_descriptor();
template<typename T>
inline const std::string& AudioSoundEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioSoundEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioSoundEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioSoundEnum_descriptor(), enum_t_value);
}
inline bool AudioSoundEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioSoundEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioSoundEnum>(
    AudioSoundEnum_descriptor(), name, value);
}
enum AudioFormatEnum : int {
  AUDIO_FORMAT_NONE = 0,
  AUDIO_FORMAT_DEFAULT = 1,
  AUDIO_FORMAT_S16_LSB = 2,
  AUDIO_FORMAT_S16_MSB = 3,
  AUDIO_FORMAT_S16_SYS = 4,
  AudioFormatEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AudioFormatEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AudioFormatEnum_IsValid(int value);
constexpr AudioFormatEnum AudioFormatEnum_MIN = AUDIO_FORMAT_NONE;
constexpr AudioFormatEnum AudioFormatEnum_MAX = AUDIO_FORMAT_S16_SYS;
constexpr int AudioFormatEnum_ARRAYSIZE = AudioFormatEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioFormatEnum_descriptor();
template<typename T>
inline const std::string& AudioFormatEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AudioFormatEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AudioFormatEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AudioFormatEnum_descriptor(), enum_t_value);
}
inline bool AudioFormatEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AudioFormatEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AudioFormatEnum>(
    AudioFormatEnum_descriptor(), name, value);
}
// ===================================================================

class MusicQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MusicQueue) */ {
 public:
  inline MusicQueue() : MusicQueue(nullptr) {}
  ~MusicQueue() override;
  explicit PROTOBUF_CONSTEXPR MusicQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MusicQueue(const MusicQueue& from);
  MusicQueue(MusicQueue&& from) noexcept
    : MusicQueue() {
    *this = ::std::move(from);
  }

  inline MusicQueue& operator=(const MusicQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MusicQueue& operator=(MusicQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MusicQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MusicQueue* internal_default_instance() {
    return reinterpret_cast<const MusicQueue*>(
               &_MusicQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MusicQueue& a, MusicQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(MusicQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MusicQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MusicQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MusicQueue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MusicQueue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MusicQueue& from) {
    MusicQueue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MusicQueue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MusicQueue";
  }
  protected:
  explicit MusicQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFileFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kAudioMusicEnumFieldNumber = 4,
  };
  // string audio_file = 1;
  void clear_audio_file();
  const std::string& audio_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_file();
  PROTOBUF_NODISCARD std::string* release_audio_file();
  void set_allocated_audio_file(std::string* audio_file);
  private:
  const std::string& _internal_audio_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_file(const std::string& value);
  std::string* _internal_mutable_audio_file();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string author = 3;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // .proto.AudioMusicEnum audio_music_enum = 4;
  void clear_audio_music_enum();
  ::proto::AudioMusicEnum audio_music_enum() const;
  void set_audio_music_enum(::proto::AudioMusicEnum value);
  private:
  ::proto::AudioMusicEnum _internal_audio_music_enum() const;
  void _internal_set_audio_music_enum(::proto::AudioMusicEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.MusicQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    int audio_music_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5faudio_2eproto;
};
// -------------------------------------------------------------------

class SoundQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SoundQueue) */ {
 public:
  inline SoundQueue() : SoundQueue(nullptr) {}
  ~SoundQueue() override;
  explicit PROTOBUF_CONSTEXPR SoundQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoundQueue(const SoundQueue& from);
  SoundQueue(SoundQueue&& from) noexcept
    : SoundQueue() {
    *this = ::std::move(from);
  }

  inline SoundQueue& operator=(const SoundQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoundQueue& operator=(SoundQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoundQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoundQueue* internal_default_instance() {
    return reinterpret_cast<const SoundQueue*>(
               &_SoundQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoundQueue& a, SoundQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(SoundQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoundQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoundQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoundQueue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SoundQueue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SoundQueue& from) {
    SoundQueue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoundQueue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SoundQueue";
  }
  protected:
  explicit SoundQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFileFieldNumber = 1,
    kTitleFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kAudioSoundEnumFieldNumber = 4,
  };
  // string audio_file = 1;
  void clear_audio_file();
  const std::string& audio_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_file();
  PROTOBUF_NODISCARD std::string* release_audio_file();
  void set_allocated_audio_file(std::string* audio_file);
  private:
  const std::string& _internal_audio_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_file(const std::string& value);
  std::string* _internal_mutable_audio_file();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string author = 3;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // .proto.AudioSoundEnum audio_sound_enum = 4;
  void clear_audio_sound_enum();
  ::proto::AudioSoundEnum audio_sound_enum() const;
  void set_audio_sound_enum(::proto::AudioSoundEnum value);
  private:
  ::proto::AudioSoundEnum _internal_audio_sound_enum() const;
  void _internal_set_audio_sound_enum(::proto::AudioSoundEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SoundQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    int audio_sound_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5faudio_2eproto;
};
// -------------------------------------------------------------------

class ClientAudio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ClientAudio) */ {
 public:
  inline ClientAudio() : ClientAudio(nullptr) {}
  ~ClientAudio() override;
  explicit PROTOBUF_CONSTEXPR ClientAudio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientAudio(const ClientAudio& from);
  ClientAudio(ClientAudio&& from) noexcept
    : ClientAudio() {
    *this = ::std::move(from);
  }

  inline ClientAudio& operator=(const ClientAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAudio& operator=(ClientAudio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientAudio& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientAudio* internal_default_instance() {
    return reinterpret_cast<const ClientAudio*>(
               &_ClientAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientAudio& a, ClientAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAudio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientAudio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientAudio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientAudio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientAudio& from) {
    ClientAudio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientAudio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ClientAudio";
  }
  protected:
  explicit ClientAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMusicQueuesFieldNumber = 6,
    kSoundQueuesFieldNumber = 7,
    kSampleRateFieldNumber = 1,
    kAudioFormatEnumFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kChunkSizeFieldNumber = 4,
    kFadeMusicFieldNumber = 5,
  };
  // repeated .proto.MusicQueue music_queues = 6;
  int music_queues_size() const;
  private:
  int _internal_music_queues_size() const;
  public:
  void clear_music_queues();
  ::proto::MusicQueue* mutable_music_queues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MusicQueue >*
      mutable_music_queues();
  private:
  const ::proto::MusicQueue& _internal_music_queues(int index) const;
  ::proto::MusicQueue* _internal_add_music_queues();
  public:
  const ::proto::MusicQueue& music_queues(int index) const;
  ::proto::MusicQueue* add_music_queues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MusicQueue >&
      music_queues() const;

  // repeated .proto.SoundQueue sound_queues = 7;
  int sound_queues_size() const;
  private:
  int _internal_sound_queues_size() const;
  public:
  void clear_sound_queues();
  ::proto::SoundQueue* mutable_sound_queues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SoundQueue >*
      mutable_sound_queues();
  private:
  const ::proto::SoundQueue& _internal_sound_queues(int index) const;
  ::proto::SoundQueue* _internal_add_sound_queues();
  public:
  const ::proto::SoundQueue& sound_queues(int index) const;
  ::proto::SoundQueue* add_sound_queues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SoundQueue >&
      sound_queues() const;

  // int32 sample_rate = 1;
  void clear_sample_rate();
  int32_t sample_rate() const;
  void set_sample_rate(int32_t value);
  private:
  int32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(int32_t value);
  public:

  // .proto.AudioFormatEnum audio_format_enum = 2;
  void clear_audio_format_enum();
  ::proto::AudioFormatEnum audio_format_enum() const;
  void set_audio_format_enum(::proto::AudioFormatEnum value);
  private:
  ::proto::AudioFormatEnum _internal_audio_format_enum() const;
  void _internal_set_audio_format_enum(::proto::AudioFormatEnum value);
  public:

  // int32 channels = 3;
  void clear_channels();
  int32_t channels() const;
  void set_channels(int32_t value);
  private:
  int32_t _internal_channels() const;
  void _internal_set_channels(int32_t value);
  public:

  // int32 chunk_size = 4;
  void clear_chunk_size();
  int32_t chunk_size() const;
  void set_chunk_size(int32_t value);
  private:
  int32_t _internal_chunk_size() const;
  void _internal_set_chunk_size(int32_t value);
  public:

  // double fade_music = 5;
  void clear_fade_music();
  double fade_music() const;
  void set_fade_music(double value);
  private:
  double _internal_fade_music() const;
  void _internal_set_fade_music(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ClientAudio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MusicQueue > music_queues_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SoundQueue > sound_queues_;
    int32_t sample_rate_;
    int audio_format_enum_;
    int32_t channels_;
    int32_t chunk_size_;
    double fade_music_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5faudio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MusicQueue

// string audio_file = 1;
inline void MusicQueue::clear_audio_file() {
  _impl_.audio_file_.ClearToEmpty();
}
inline const std::string& MusicQueue::audio_file() const {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.audio_file)
  return _internal_audio_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MusicQueue::set_audio_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audio_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MusicQueue.audio_file)
}
inline std::string* MusicQueue::mutable_audio_file() {
  std::string* _s = _internal_mutable_audio_file();
  // @@protoc_insertion_point(field_mutable:proto.MusicQueue.audio_file)
  return _s;
}
inline const std::string& MusicQueue::_internal_audio_file() const {
  return _impl_.audio_file_.Get();
}
inline void MusicQueue::_internal_set_audio_file(const std::string& value) {
  
  _impl_.audio_file_.Set(value, GetArenaForAllocation());
}
inline std::string* MusicQueue::_internal_mutable_audio_file() {
  
  return _impl_.audio_file_.Mutable(GetArenaForAllocation());
}
inline std::string* MusicQueue::release_audio_file() {
  // @@protoc_insertion_point(field_release:proto.MusicQueue.audio_file)
  return _impl_.audio_file_.Release();
}
inline void MusicQueue::set_allocated_audio_file(std::string* audio_file) {
  if (audio_file != nullptr) {
    
  } else {
    
  }
  _impl_.audio_file_.SetAllocated(audio_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_file_.IsDefault()) {
    _impl_.audio_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MusicQueue.audio_file)
}

// string title = 2;
inline void MusicQueue::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& MusicQueue::title() const {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MusicQueue::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MusicQueue.title)
}
inline std::string* MusicQueue::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:proto.MusicQueue.title)
  return _s;
}
inline const std::string& MusicQueue::_internal_title() const {
  return _impl_.title_.Get();
}
inline void MusicQueue::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* MusicQueue::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* MusicQueue::release_title() {
  // @@protoc_insertion_point(field_release:proto.MusicQueue.title)
  return _impl_.title_.Release();
}
inline void MusicQueue::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MusicQueue.title)
}

// string author = 3;
inline void MusicQueue::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& MusicQueue::author() const {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MusicQueue::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MusicQueue.author)
}
inline std::string* MusicQueue::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto.MusicQueue.author)
  return _s;
}
inline const std::string& MusicQueue::_internal_author() const {
  return _impl_.author_.Get();
}
inline void MusicQueue::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* MusicQueue::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* MusicQueue::release_author() {
  // @@protoc_insertion_point(field_release:proto.MusicQueue.author)
  return _impl_.author_.Release();
}
inline void MusicQueue::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MusicQueue.author)
}

// .proto.AudioMusicEnum audio_music_enum = 4;
inline void MusicQueue::clear_audio_music_enum() {
  _impl_.audio_music_enum_ = 0;
}
inline ::proto::AudioMusicEnum MusicQueue::_internal_audio_music_enum() const {
  return static_cast< ::proto::AudioMusicEnum >(_impl_.audio_music_enum_);
}
inline ::proto::AudioMusicEnum MusicQueue::audio_music_enum() const {
  // @@protoc_insertion_point(field_get:proto.MusicQueue.audio_music_enum)
  return _internal_audio_music_enum();
}
inline void MusicQueue::_internal_set_audio_music_enum(::proto::AudioMusicEnum value) {
  
  _impl_.audio_music_enum_ = value;
}
inline void MusicQueue::set_audio_music_enum(::proto::AudioMusicEnum value) {
  _internal_set_audio_music_enum(value);
  // @@protoc_insertion_point(field_set:proto.MusicQueue.audio_music_enum)
}

// -------------------------------------------------------------------

// SoundQueue

// string audio_file = 1;
inline void SoundQueue::clear_audio_file() {
  _impl_.audio_file_.ClearToEmpty();
}
inline const std::string& SoundQueue::audio_file() const {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.audio_file)
  return _internal_audio_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SoundQueue::set_audio_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.audio_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SoundQueue.audio_file)
}
inline std::string* SoundQueue::mutable_audio_file() {
  std::string* _s = _internal_mutable_audio_file();
  // @@protoc_insertion_point(field_mutable:proto.SoundQueue.audio_file)
  return _s;
}
inline const std::string& SoundQueue::_internal_audio_file() const {
  return _impl_.audio_file_.Get();
}
inline void SoundQueue::_internal_set_audio_file(const std::string& value) {
  
  _impl_.audio_file_.Set(value, GetArenaForAllocation());
}
inline std::string* SoundQueue::_internal_mutable_audio_file() {
  
  return _impl_.audio_file_.Mutable(GetArenaForAllocation());
}
inline std::string* SoundQueue::release_audio_file() {
  // @@protoc_insertion_point(field_release:proto.SoundQueue.audio_file)
  return _impl_.audio_file_.Release();
}
inline void SoundQueue::set_allocated_audio_file(std::string* audio_file) {
  if (audio_file != nullptr) {
    
  } else {
    
  }
  _impl_.audio_file_.SetAllocated(audio_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.audio_file_.IsDefault()) {
    _impl_.audio_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SoundQueue.audio_file)
}

// string title = 2;
inline void SoundQueue::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SoundQueue::title() const {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SoundQueue::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SoundQueue.title)
}
inline std::string* SoundQueue::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:proto.SoundQueue.title)
  return _s;
}
inline const std::string& SoundQueue::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SoundQueue::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SoundQueue::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* SoundQueue::release_title() {
  // @@protoc_insertion_point(field_release:proto.SoundQueue.title)
  return _impl_.title_.Release();
}
inline void SoundQueue::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SoundQueue.title)
}

// string author = 3;
inline void SoundQueue::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& SoundQueue::author() const {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SoundQueue::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SoundQueue.author)
}
inline std::string* SoundQueue::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto.SoundQueue.author)
  return _s;
}
inline const std::string& SoundQueue::_internal_author() const {
  return _impl_.author_.Get();
}
inline void SoundQueue::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* SoundQueue::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* SoundQueue::release_author() {
  // @@protoc_insertion_point(field_release:proto.SoundQueue.author)
  return _impl_.author_.Release();
}
inline void SoundQueue::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SoundQueue.author)
}

// .proto.AudioSoundEnum audio_sound_enum = 4;
inline void SoundQueue::clear_audio_sound_enum() {
  _impl_.audio_sound_enum_ = 0;
}
inline ::proto::AudioSoundEnum SoundQueue::_internal_audio_sound_enum() const {
  return static_cast< ::proto::AudioSoundEnum >(_impl_.audio_sound_enum_);
}
inline ::proto::AudioSoundEnum SoundQueue::audio_sound_enum() const {
  // @@protoc_insertion_point(field_get:proto.SoundQueue.audio_sound_enum)
  return _internal_audio_sound_enum();
}
inline void SoundQueue::_internal_set_audio_sound_enum(::proto::AudioSoundEnum value) {
  
  _impl_.audio_sound_enum_ = value;
}
inline void SoundQueue::set_audio_sound_enum(::proto::AudioSoundEnum value) {
  _internal_set_audio_sound_enum(value);
  // @@protoc_insertion_point(field_set:proto.SoundQueue.audio_sound_enum)
}

// -------------------------------------------------------------------

// ClientAudio

// int32 sample_rate = 1;
inline void ClientAudio::clear_sample_rate() {
  _impl_.sample_rate_ = 0;
}
inline int32_t ClientAudio::_internal_sample_rate() const {
  return _impl_.sample_rate_;
}
inline int32_t ClientAudio::sample_rate() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.sample_rate)
  return _internal_sample_rate();
}
inline void ClientAudio::_internal_set_sample_rate(int32_t value) {
  
  _impl_.sample_rate_ = value;
}
inline void ClientAudio::set_sample_rate(int32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.sample_rate)
}

// .proto.AudioFormatEnum audio_format_enum = 2;
inline void ClientAudio::clear_audio_format_enum() {
  _impl_.audio_format_enum_ = 0;
}
inline ::proto::AudioFormatEnum ClientAudio::_internal_audio_format_enum() const {
  return static_cast< ::proto::AudioFormatEnum >(_impl_.audio_format_enum_);
}
inline ::proto::AudioFormatEnum ClientAudio::audio_format_enum() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.audio_format_enum)
  return _internal_audio_format_enum();
}
inline void ClientAudio::_internal_set_audio_format_enum(::proto::AudioFormatEnum value) {
  
  _impl_.audio_format_enum_ = value;
}
inline void ClientAudio::set_audio_format_enum(::proto::AudioFormatEnum value) {
  _internal_set_audio_format_enum(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.audio_format_enum)
}

// int32 channels = 3;
inline void ClientAudio::clear_channels() {
  _impl_.channels_ = 0;
}
inline int32_t ClientAudio::_internal_channels() const {
  return _impl_.channels_;
}
inline int32_t ClientAudio::channels() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.channels)
  return _internal_channels();
}
inline void ClientAudio::_internal_set_channels(int32_t value) {
  
  _impl_.channels_ = value;
}
inline void ClientAudio::set_channels(int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.channels)
}

// int32 chunk_size = 4;
inline void ClientAudio::clear_chunk_size() {
  _impl_.chunk_size_ = 0;
}
inline int32_t ClientAudio::_internal_chunk_size() const {
  return _impl_.chunk_size_;
}
inline int32_t ClientAudio::chunk_size() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.chunk_size)
  return _internal_chunk_size();
}
inline void ClientAudio::_internal_set_chunk_size(int32_t value) {
  
  _impl_.chunk_size_ = value;
}
inline void ClientAudio::set_chunk_size(int32_t value) {
  _internal_set_chunk_size(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.chunk_size)
}

// double fade_music = 5;
inline void ClientAudio::clear_fade_music() {
  _impl_.fade_music_ = 0;
}
inline double ClientAudio::_internal_fade_music() const {
  return _impl_.fade_music_;
}
inline double ClientAudio::fade_music() const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.fade_music)
  return _internal_fade_music();
}
inline void ClientAudio::_internal_set_fade_music(double value) {
  
  _impl_.fade_music_ = value;
}
inline void ClientAudio::set_fade_music(double value) {
  _internal_set_fade_music(value);
  // @@protoc_insertion_point(field_set:proto.ClientAudio.fade_music)
}

// repeated .proto.MusicQueue music_queues = 6;
inline int ClientAudio::_internal_music_queues_size() const {
  return _impl_.music_queues_.size();
}
inline int ClientAudio::music_queues_size() const {
  return _internal_music_queues_size();
}
inline void ClientAudio::clear_music_queues() {
  _impl_.music_queues_.Clear();
}
inline ::proto::MusicQueue* ClientAudio::mutable_music_queues(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ClientAudio.music_queues)
  return _impl_.music_queues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MusicQueue >*
ClientAudio::mutable_music_queues() {
  // @@protoc_insertion_point(field_mutable_list:proto.ClientAudio.music_queues)
  return &_impl_.music_queues_;
}
inline const ::proto::MusicQueue& ClientAudio::_internal_music_queues(int index) const {
  return _impl_.music_queues_.Get(index);
}
inline const ::proto::MusicQueue& ClientAudio::music_queues(int index) const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.music_queues)
  return _internal_music_queues(index);
}
inline ::proto::MusicQueue* ClientAudio::_internal_add_music_queues() {
  return _impl_.music_queues_.Add();
}
inline ::proto::MusicQueue* ClientAudio::add_music_queues() {
  ::proto::MusicQueue* _add = _internal_add_music_queues();
  // @@protoc_insertion_point(field_add:proto.ClientAudio.music_queues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MusicQueue >&
ClientAudio::music_queues() const {
  // @@protoc_insertion_point(field_list:proto.ClientAudio.music_queues)
  return _impl_.music_queues_;
}

// repeated .proto.SoundQueue sound_queues = 7;
inline int ClientAudio::_internal_sound_queues_size() const {
  return _impl_.sound_queues_.size();
}
inline int ClientAudio::sound_queues_size() const {
  return _internal_sound_queues_size();
}
inline void ClientAudio::clear_sound_queues() {
  _impl_.sound_queues_.Clear();
}
inline ::proto::SoundQueue* ClientAudio::mutable_sound_queues(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ClientAudio.sound_queues)
  return _impl_.sound_queues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SoundQueue >*
ClientAudio::mutable_sound_queues() {
  // @@protoc_insertion_point(field_mutable_list:proto.ClientAudio.sound_queues)
  return &_impl_.sound_queues_;
}
inline const ::proto::SoundQueue& ClientAudio::_internal_sound_queues(int index) const {
  return _impl_.sound_queues_.Get(index);
}
inline const ::proto::SoundQueue& ClientAudio::sound_queues(int index) const {
  // @@protoc_insertion_point(field_get:proto.ClientAudio.sound_queues)
  return _internal_sound_queues(index);
}
inline ::proto::SoundQueue* ClientAudio::_internal_add_sound_queues() {
  return _impl_.sound_queues_.Add();
}
inline ::proto::SoundQueue* ClientAudio::add_sound_queues() {
  ::proto::SoundQueue* _add = _internal_add_sound_queues();
  // @@protoc_insertion_point(field_add:proto.ClientAudio.sound_queues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SoundQueue >&
ClientAudio::sound_queues() const {
  // @@protoc_insertion_point(field_list:proto.ClientAudio.sound_queues)
  return _impl_.sound_queues_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::AudioMusicEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::AudioMusicEnum>() {
  return ::proto::AudioMusicEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::AudioSoundEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::AudioSoundEnum>() {
  return ::proto::AudioSoundEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::AudioFormatEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::AudioFormatEnum>() {
  return ::proto::AudioFormatEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5faudio_2eproto
