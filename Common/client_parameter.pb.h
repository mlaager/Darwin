// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector_math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fparameter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fparameter_2eproto;
namespace proto {
class ClientParameter;
struct ClientParameterDefaultTypeInternal;
extern ClientParameterDefaultTypeInternal _ClientParameter_default_instance_;
class ColorString;
struct ColorStringDefaultTypeInternal;
extern ColorStringDefaultTypeInternal _ColorString_default_instance_;
class FontSize;
struct FontSizeDefaultTypeInternal;
extern FontSizeDefaultTypeInternal _FontSize_default_instance_;
class PageDescription;
struct PageDescriptionDefaultTypeInternal;
extern PageDescriptionDefaultTypeInternal _PageDescription_default_instance_;
class PageElement;
struct PageElementDefaultTypeInternal;
extern PageElementDefaultTypeInternal _PageElement_default_instance_;
class PageElementDecoration;
struct PageElementDecorationDefaultTypeInternal;
extern PageElementDecorationDefaultTypeInternal _PageElementDecoration_default_instance_;
class PageElementImage;
struct PageElementImageDefaultTypeInternal;
extern PageElementImageDefaultTypeInternal _PageElementImage_default_instance_;
class PageElementLine;
struct PageElementLineDefaultTypeInternal;
extern PageElementLineDefaultTypeInternal _PageElementLine_default_instance_;
class PageElementList;
struct PageElementListDefaultTypeInternal;
extern PageElementListDefaultTypeInternal _PageElementList_default_instance_;
class PageElementRectFilled;
struct PageElementRectFilledDefaultTypeInternal;
extern PageElementRectFilledDefaultTypeInternal _PageElementRectFilled_default_instance_;
class PageElementText;
struct PageElementTextDefaultTypeInternal;
extern PageElementTextDefaultTypeInternal _PageElementText_default_instance_;
class Vector2String;
struct Vector2StringDefaultTypeInternal;
extern Vector2StringDefaultTypeInternal _Vector2String_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ClientParameter* Arena::CreateMaybeMessage<::proto::ClientParameter>(Arena*);
template<> ::proto::ColorString* Arena::CreateMaybeMessage<::proto::ColorString>(Arena*);
template<> ::proto::FontSize* Arena::CreateMaybeMessage<::proto::FontSize>(Arena*);
template<> ::proto::PageDescription* Arena::CreateMaybeMessage<::proto::PageDescription>(Arena*);
template<> ::proto::PageElement* Arena::CreateMaybeMessage<::proto::PageElement>(Arena*);
template<> ::proto::PageElementDecoration* Arena::CreateMaybeMessage<::proto::PageElementDecoration>(Arena*);
template<> ::proto::PageElementImage* Arena::CreateMaybeMessage<::proto::PageElementImage>(Arena*);
template<> ::proto::PageElementLine* Arena::CreateMaybeMessage<::proto::PageElementLine>(Arena*);
template<> ::proto::PageElementList* Arena::CreateMaybeMessage<::proto::PageElementList>(Arena*);
template<> ::proto::PageElementRectFilled* Arena::CreateMaybeMessage<::proto::PageElementRectFilled>(Arena*);
template<> ::proto::PageElementText* Arena::CreateMaybeMessage<::proto::PageElementText>(Arena*);
template<> ::proto::Vector2String* Arena::CreateMaybeMessage<::proto::Vector2String>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum TextSizeEnum : int {
  TEXT_SIZE_SMALL = 0,
  TEXT_SIZE_MEDIUM = 1,
  TEXT_SIZE_LARGE = 2,
  TEXT_SIZE_TITLE = 3,
  TextSizeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TextSizeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TextSizeEnum_IsValid(int value);
constexpr TextSizeEnum TextSizeEnum_MIN = TEXT_SIZE_SMALL;
constexpr TextSizeEnum TextSizeEnum_MAX = TEXT_SIZE_TITLE;
constexpr int TextSizeEnum_ARRAYSIZE = TextSizeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextSizeEnum_descriptor();
template<typename T>
inline const std::string& TextSizeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextSizeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextSizeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextSizeEnum_descriptor(), enum_t_value);
}
inline bool TextSizeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextSizeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextSizeEnum>(
    TextSizeEnum_descriptor(), name, value);
}
enum AlignmentEnum : int {
  ALIGNMENT_TOP_LEFT = 0,
  ALIGNMENT_TOP = 1,
  ALIGNMENT_TOP_RIGHT = 2,
  ALIGNMENT_CENTER_LEFT = 3,
  ALIGNMENT_CENTER = 4,
  ALIGNMENT_CENTER_RIGHT = 5,
  ALIGNMENT_BOTTOM_LEFT = 6,
  ALIGNMENT_BOTTOM = 7,
  ALIGNMENT_BOTTOM_RIGHT = 8,
  AlignmentEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AlignmentEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AlignmentEnum_IsValid(int value);
constexpr AlignmentEnum AlignmentEnum_MIN = ALIGNMENT_TOP_LEFT;
constexpr AlignmentEnum AlignmentEnum_MAX = ALIGNMENT_BOTTOM_RIGHT;
constexpr int AlignmentEnum_ARRAYSIZE = AlignmentEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlignmentEnum_descriptor();
template<typename T>
inline const std::string& AlignmentEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlignmentEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlignmentEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlignmentEnum_descriptor(), enum_t_value);
}
inline bool AlignmentEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlignmentEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlignmentEnum>(
    AlignmentEnum_descriptor(), name, value);
}
enum DecorationEnum : int {
  DECORATION_NONE = 0,
  DECORATION_SHADOW = 1,
  DECORATION_OUTLINE = 2,
  DecorationEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DecorationEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DecorationEnum_IsValid(int value);
constexpr DecorationEnum DecorationEnum_MIN = DECORATION_NONE;
constexpr DecorationEnum DecorationEnum_MAX = DECORATION_OUTLINE;
constexpr int DecorationEnum_ARRAYSIZE = DecorationEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DecorationEnum_descriptor();
template<typename T>
inline const std::string& DecorationEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DecorationEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DecorationEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DecorationEnum_descriptor(), enum_t_value);
}
inline bool DecorationEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DecorationEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DecorationEnum>(
    DecorationEnum_descriptor(), name, value);
}
// ===================================================================

class FontSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FontSize) */ {
 public:
  inline FontSize() : FontSize(nullptr) {}
  ~FontSize() override;
  explicit PROTOBUF_CONSTEXPR FontSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontSize(const FontSize& from);
  FontSize(FontSize&& from) noexcept
    : FontSize() {
    *this = ::std::move(from);
  }

  inline FontSize& operator=(const FontSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontSize& operator=(FontSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FontSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontSize* internal_default_instance() {
    return reinterpret_cast<const FontSize*>(
               &_FontSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FontSize& a, FontSize& b) {
    a.Swap(&b);
  }
  inline void Swap(FontSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FontSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FontSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FontSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FontSize& from) {
    FontSize::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FontSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FontSize";
  }
  protected:
  explicit FontSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kTextSizeEnumFieldNumber = 1,
  };
  // double size = 2;
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // .proto.TextSizeEnum text_size_enum = 1;
  void clear_text_size_enum();
  ::proto::TextSizeEnum text_size_enum() const;
  void set_text_size_enum(::proto::TextSizeEnum value);
  private:
  ::proto::TextSizeEnum _internal_text_size_enum() const;
  void _internal_set_text_size_enum(::proto::TextSizeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:proto.FontSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double size_;
    int text_size_enum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class ClientParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ClientParameter) */ {
 public:
  inline ClientParameter() : ClientParameter(nullptr) {}
  ~ClientParameter() override;
  explicit PROTOBUF_CONSTEXPR ClientParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientParameter(const ClientParameter& from);
  ClientParameter(ClientParameter&& from) noexcept
    : ClientParameter() {
    *this = ::std::move(from);
  }

  inline ClientParameter& operator=(const ClientParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientParameter& operator=(ClientParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientParameter* internal_default_instance() {
    return reinterpret_cast<const ClientParameter*>(
               &_ClientParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientParameter& a, ClientParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientParameter& from) {
    ClientParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ClientParameter";
  }
  protected:
  explicit ClientParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontSizesFieldNumber = 3,
    kServerNameFieldNumber = 1,
    kFontFileFieldNumber = 2,
    kOverlayTitleFieldNumber = 4,
    kOverlayStateFieldNumber = 5,
    kOverlayPlayFieldNumber = 6,
  };
  // repeated .proto.FontSize font_sizes = 3;
  int font_sizes_size() const;
  private:
  int _internal_font_sizes_size() const;
  public:
  void clear_font_sizes();
  ::proto::FontSize* mutable_font_sizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FontSize >*
      mutable_font_sizes();
  private:
  const ::proto::FontSize& _internal_font_sizes(int index) const;
  ::proto::FontSize* _internal_add_font_sizes();
  public:
  const ::proto::FontSize& font_sizes(int index) const;
  ::proto::FontSize* add_font_sizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FontSize >&
      font_sizes() const;

  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string font_file = 2;
  void clear_font_file();
  const std::string& font_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font_file();
  PROTOBUF_NODISCARD std::string* release_font_file();
  void set_allocated_font_file(std::string* font_file);
  private:
  const std::string& _internal_font_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font_file(const std::string& value);
  std::string* _internal_mutable_font_file();
  public:

  // .proto.PageDescription overlay_title = 4;
  bool has_overlay_title() const;
  private:
  bool _internal_has_overlay_title() const;
  public:
  void clear_overlay_title();
  const ::proto::PageDescription& overlay_title() const;
  PROTOBUF_NODISCARD ::proto::PageDescription* release_overlay_title();
  ::proto::PageDescription* mutable_overlay_title();
  void set_allocated_overlay_title(::proto::PageDescription* overlay_title);
  private:
  const ::proto::PageDescription& _internal_overlay_title() const;
  ::proto::PageDescription* _internal_mutable_overlay_title();
  public:
  void unsafe_arena_set_allocated_overlay_title(
      ::proto::PageDescription* overlay_title);
  ::proto::PageDescription* unsafe_arena_release_overlay_title();

  // .proto.PageDescription overlay_state = 5;
  bool has_overlay_state() const;
  private:
  bool _internal_has_overlay_state() const;
  public:
  void clear_overlay_state();
  const ::proto::PageDescription& overlay_state() const;
  PROTOBUF_NODISCARD ::proto::PageDescription* release_overlay_state();
  ::proto::PageDescription* mutable_overlay_state();
  void set_allocated_overlay_state(::proto::PageDescription* overlay_state);
  private:
  const ::proto::PageDescription& _internal_overlay_state() const;
  ::proto::PageDescription* _internal_mutable_overlay_state();
  public:
  void unsafe_arena_set_allocated_overlay_state(
      ::proto::PageDescription* overlay_state);
  ::proto::PageDescription* unsafe_arena_release_overlay_state();

  // .proto.PageDescription overlay_play = 6;
  bool has_overlay_play() const;
  private:
  bool _internal_has_overlay_play() const;
  public:
  void clear_overlay_play();
  const ::proto::PageDescription& overlay_play() const;
  PROTOBUF_NODISCARD ::proto::PageDescription* release_overlay_play();
  ::proto::PageDescription* mutable_overlay_play();
  void set_allocated_overlay_play(::proto::PageDescription* overlay_play);
  private:
  const ::proto::PageDescription& _internal_overlay_play() const;
  ::proto::PageDescription* _internal_mutable_overlay_play();
  public:
  void unsafe_arena_set_allocated_overlay_play(
      ::proto::PageDescription* overlay_play);
  ::proto::PageDescription* unsafe_arena_release_overlay_play();

  // @@protoc_insertion_point(class_scope:proto.ClientParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FontSize > font_sizes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_file_;
    ::proto::PageDescription* overlay_title_;
    ::proto::PageDescription* overlay_state_;
    ::proto::PageDescription* overlay_play_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class ColorString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ColorString) */ {
 public:
  inline ColorString() : ColorString(nullptr) {}
  ~ColorString() override;
  explicit PROTOBUF_CONSTEXPR ColorString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorString(const ColorString& from);
  ColorString(ColorString&& from) noexcept
    : ColorString() {
    *this = ::std::move(from);
  }

  inline ColorString& operator=(const ColorString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorString& operator=(ColorString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorString* internal_default_instance() {
    return reinterpret_cast<const ColorString*>(
               &_ColorString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ColorString& a, ColorString& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColorString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColorString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColorString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColorString& from) {
    ColorString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ColorString";
  }
  protected:
  explicit ColorString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
    kAlphaFieldNumber = 4,
  };
  // string red = 1;
  void clear_red();
  const std::string& red() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_red(ArgT0&& arg0, ArgT... args);
  std::string* mutable_red();
  PROTOBUF_NODISCARD std::string* release_red();
  void set_allocated_red(std::string* red);
  private:
  const std::string& _internal_red() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_red(const std::string& value);
  std::string* _internal_mutable_red();
  public:

  // string green = 2;
  void clear_green();
  const std::string& green() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_green(ArgT0&& arg0, ArgT... args);
  std::string* mutable_green();
  PROTOBUF_NODISCARD std::string* release_green();
  void set_allocated_green(std::string* green);
  private:
  const std::string& _internal_green() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_green(const std::string& value);
  std::string* _internal_mutable_green();
  public:

  // string blue = 3;
  void clear_blue();
  const std::string& blue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blue();
  PROTOBUF_NODISCARD std::string* release_blue();
  void set_allocated_blue(std::string* blue);
  private:
  const std::string& _internal_blue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blue(const std::string& value);
  std::string* _internal_mutable_blue();
  public:

  // string alpha = 4;
  void clear_alpha();
  const std::string& alpha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha();
  PROTOBUF_NODISCARD std::string* release_alpha();
  void set_allocated_alpha(std::string* alpha);
  private:
  const std::string& _internal_alpha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha(const std::string& value);
  std::string* _internal_mutable_alpha();
  public:

  // @@protoc_insertion_point(class_scope:proto.ColorString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr red_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr green_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class Vector2String final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Vector2String) */ {
 public:
  inline Vector2String() : Vector2String(nullptr) {}
  ~Vector2String() override;
  explicit PROTOBUF_CONSTEXPR Vector2String(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2String(const Vector2String& from);
  Vector2String(Vector2String&& from) noexcept
    : Vector2String() {
    *this = ::std::move(from);
  }

  inline Vector2String& operator=(const Vector2String& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2String& operator=(Vector2String&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2String& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2String* internal_default_instance() {
    return reinterpret_cast<const Vector2String*>(
               &_Vector2String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vector2String& a, Vector2String& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2String* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2String* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2String>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2String& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2String& from) {
    Vector2String::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2String* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Vector2String";
  }
  protected:
  explicit Vector2String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // string x = 1;
  void clear_x();
  const std::string& x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // string y = 2;
  void clear_y();
  const std::string& y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y();
  PROTOBUF_NODISCARD std::string* release_y();
  void set_allocated_y(std::string* y);
  private:
  const std::string& _internal_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y(const std::string& value);
  std::string* _internal_mutable_y();
  public:

  // @@protoc_insertion_point(class_scope:proto.Vector2String)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageElementDecoration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageElementDecoration) */ {
 public:
  inline PageElementDecoration() : PageElementDecoration(nullptr) {}
  ~PageElementDecoration() override;
  explicit PROTOBUF_CONSTEXPR PageElementDecoration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageElementDecoration(const PageElementDecoration& from);
  PageElementDecoration(PageElementDecoration&& from) noexcept
    : PageElementDecoration() {
    *this = ::std::move(from);
  }

  inline PageElementDecoration& operator=(const PageElementDecoration& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageElementDecoration& operator=(PageElementDecoration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageElementDecoration& default_instance() {
    return *internal_default_instance();
  }
  enum OffsetOneofCase {
    kOffset = 1,
    kOffsetString = 2,
    OFFSETONEOF_NOT_SET = 0,
  };

  enum ColorOneofCase {
    kColor = 3,
    kColorString = 4,
    COLORONEOF_NOT_SET = 0,
  };

  static inline const PageElementDecoration* internal_default_instance() {
    return reinterpret_cast<const PageElementDecoration*>(
               &_PageElementDecoration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PageElementDecoration& a, PageElementDecoration& b) {
    a.Swap(&b);
  }
  inline void Swap(PageElementDecoration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageElementDecoration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageElementDecoration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageElementDecoration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageElementDecoration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageElementDecoration& from) {
    PageElementDecoration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageElementDecoration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageElementDecoration";
  }
  protected:
  explicit PageElementDecoration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecorationEnumFieldNumber = 5,
    kOffsetFieldNumber = 1,
    kOffsetStringFieldNumber = 2,
    kColorFieldNumber = 3,
    kColorStringFieldNumber = 4,
  };
  // .proto.DecorationEnum decoration_enum = 5;
  void clear_decoration_enum();
  ::proto::DecorationEnum decoration_enum() const;
  void set_decoration_enum(::proto::DecorationEnum value);
  private:
  ::proto::DecorationEnum _internal_decoration_enum() const;
  void _internal_set_decoration_enum(::proto::DecorationEnum value);
  public:

  // .proto.Vector2 offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::proto::Vector2& offset() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_offset();
  ::proto::Vector2* mutable_offset();
  void set_allocated_offset(::proto::Vector2* offset);
  private:
  const ::proto::Vector2& _internal_offset() const;
  ::proto::Vector2* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::proto::Vector2* offset);
  ::proto::Vector2* unsafe_arena_release_offset();

  // .proto.Vector2String offset_string = 2;
  bool has_offset_string() const;
  private:
  bool _internal_has_offset_string() const;
  public:
  void clear_offset_string();
  const ::proto::Vector2String& offset_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_offset_string();
  ::proto::Vector2String* mutable_offset_string();
  void set_allocated_offset_string(::proto::Vector2String* offset_string);
  private:
  const ::proto::Vector2String& _internal_offset_string() const;
  ::proto::Vector2String* _internal_mutable_offset_string();
  public:
  void unsafe_arena_set_allocated_offset_string(
      ::proto::Vector2String* offset_string);
  ::proto::Vector2String* unsafe_arena_release_offset_string();

  // .proto.Vector4 color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector4& color() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_color();
  ::proto::Vector4* mutable_color();
  void set_allocated_color(::proto::Vector4* color);
  private:
  const ::proto::Vector4& _internal_color() const;
  ::proto::Vector4* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector4* color);
  ::proto::Vector4* unsafe_arena_release_color();

  // .proto.ColorString color_string = 4;
  bool has_color_string() const;
  private:
  bool _internal_has_color_string() const;
  public:
  void clear_color_string();
  const ::proto::ColorString& color_string() const;
  PROTOBUF_NODISCARD ::proto::ColorString* release_color_string();
  ::proto::ColorString* mutable_color_string();
  void set_allocated_color_string(::proto::ColorString* color_string);
  private:
  const ::proto::ColorString& _internal_color_string() const;
  ::proto::ColorString* _internal_mutable_color_string();
  public:
  void unsafe_arena_set_allocated_color_string(
      ::proto::ColorString* color_string);
  ::proto::ColorString* unsafe_arena_release_color_string();

  void clear_OffsetOneof();
  OffsetOneofCase OffsetOneof_case() const;
  void clear_ColorOneof();
  ColorOneofCase ColorOneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.PageElementDecoration)
 private:
  class _Internal;
  void set_has_offset();
  void set_has_offset_string();
  void set_has_color();
  void set_has_color_string();

  inline bool has_OffsetOneof() const;
  inline void clear_has_OffsetOneof();

  inline bool has_ColorOneof() const;
  inline void clear_has_ColorOneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int decoration_enum_;
    union OffsetOneofUnion {
      constexpr OffsetOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* offset_;
      ::proto::Vector2String* offset_string_;
    } OffsetOneof_;
    union ColorOneofUnion {
      constexpr ColorOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector4* color_;
      ::proto::ColorString* color_string_;
    } ColorOneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageElementText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageElementText) */ {
 public:
  inline PageElementText() : PageElementText(nullptr) {}
  ~PageElementText() override;
  explicit PROTOBUF_CONSTEXPR PageElementText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageElementText(const PageElementText& from);
  PageElementText(PageElementText&& from) noexcept
    : PageElementText() {
    *this = ::std::move(from);
  }

  inline PageElementText& operator=(const PageElementText& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageElementText& operator=(PageElementText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageElementText& default_instance() {
    return *internal_default_instance();
  }
  enum ColorOneofCase {
    kColor = 2,
    kColorString = 3,
    COLORONEOF_NOT_SET = 0,
  };

  enum PositionOneofCase {
    kPosition = 4,
    kPositionString = 5,
    POSITIONONEOF_NOT_SET = 0,
  };

  static inline const PageElementText* internal_default_instance() {
    return reinterpret_cast<const PageElementText*>(
               &_PageElementText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PageElementText& a, PageElementText& b) {
    a.Swap(&b);
  }
  inline void Swap(PageElementText* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageElementText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageElementText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageElementText>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageElementText& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageElementText& from) {
    PageElementText::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageElementText* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageElementText";
  }
  protected:
  explicit PageElementText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecorationsFieldNumber = 8,
    kTextFieldNumber = 1,
    kTextSizeEnumFieldNumber = 6,
    kAlignmentEnumFieldNumber = 7,
    kColorFieldNumber = 2,
    kColorStringFieldNumber = 3,
    kPositionFieldNumber = 4,
    kPositionStringFieldNumber = 5,
  };
  // repeated .proto.PageElementDecoration decorations = 8;
  int decorations_size() const;
  private:
  int _internal_decorations_size() const;
  public:
  void clear_decorations();
  ::proto::PageElementDecoration* mutable_decorations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElementDecoration >*
      mutable_decorations();
  private:
  const ::proto::PageElementDecoration& _internal_decorations(int index) const;
  ::proto::PageElementDecoration* _internal_add_decorations();
  public:
  const ::proto::PageElementDecoration& decorations(int index) const;
  ::proto::PageElementDecoration* add_decorations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElementDecoration >&
      decorations() const;

  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .proto.TextSizeEnum text_size_enum = 6;
  void clear_text_size_enum();
  ::proto::TextSizeEnum text_size_enum() const;
  void set_text_size_enum(::proto::TextSizeEnum value);
  private:
  ::proto::TextSizeEnum _internal_text_size_enum() const;
  void _internal_set_text_size_enum(::proto::TextSizeEnum value);
  public:

  // .proto.AlignmentEnum alignment_enum = 7;
  void clear_alignment_enum();
  ::proto::AlignmentEnum alignment_enum() const;
  void set_alignment_enum(::proto::AlignmentEnum value);
  private:
  ::proto::AlignmentEnum _internal_alignment_enum() const;
  void _internal_set_alignment_enum(::proto::AlignmentEnum value);
  public:

  // .proto.Vector4 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector4& color() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_color();
  ::proto::Vector4* mutable_color();
  void set_allocated_color(::proto::Vector4* color);
  private:
  const ::proto::Vector4& _internal_color() const;
  ::proto::Vector4* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector4* color);
  ::proto::Vector4* unsafe_arena_release_color();

  // .proto.ColorString color_string = 3;
  bool has_color_string() const;
  private:
  bool _internal_has_color_string() const;
  public:
  void clear_color_string();
  const ::proto::ColorString& color_string() const;
  PROTOBUF_NODISCARD ::proto::ColorString* release_color_string();
  ::proto::ColorString* mutable_color_string();
  void set_allocated_color_string(::proto::ColorString* color_string);
  private:
  const ::proto::ColorString& _internal_color_string() const;
  ::proto::ColorString* _internal_mutable_color_string();
  public:
  void unsafe_arena_set_allocated_color_string(
      ::proto::ColorString* color_string);
  ::proto::ColorString* unsafe_arena_release_color_string();

  // .proto.Vector2 position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Vector2& position() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_position();
  ::proto::Vector2* mutable_position();
  void set_allocated_position(::proto::Vector2* position);
  private:
  const ::proto::Vector2& _internal_position() const;
  ::proto::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Vector2* position);
  ::proto::Vector2* unsafe_arena_release_position();

  // .proto.Vector2String position_string = 5;
  bool has_position_string() const;
  private:
  bool _internal_has_position_string() const;
  public:
  void clear_position_string();
  const ::proto::Vector2String& position_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_position_string();
  ::proto::Vector2String* mutable_position_string();
  void set_allocated_position_string(::proto::Vector2String* position_string);
  private:
  const ::proto::Vector2String& _internal_position_string() const;
  ::proto::Vector2String* _internal_mutable_position_string();
  public:
  void unsafe_arena_set_allocated_position_string(
      ::proto::Vector2String* position_string);
  ::proto::Vector2String* unsafe_arena_release_position_string();

  void clear_ColorOneof();
  ColorOneofCase ColorOneof_case() const;
  void clear_PositionOneof();
  PositionOneofCase PositionOneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.PageElementText)
 private:
  class _Internal;
  void set_has_color();
  void set_has_color_string();
  void set_has_position();
  void set_has_position_string();

  inline bool has_ColorOneof() const;
  inline void clear_has_ColorOneof();

  inline bool has_PositionOneof() const;
  inline void clear_has_PositionOneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElementDecoration > decorations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int text_size_enum_;
    int alignment_enum_;
    union ColorOneofUnion {
      constexpr ColorOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector4* color_;
      ::proto::ColorString* color_string_;
    } ColorOneof_;
    union PositionOneofUnion {
      constexpr PositionOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* position_;
      ::proto::Vector2String* position_string_;
    } PositionOneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageElementImage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageElementImage) */ {
 public:
  inline PageElementImage() : PageElementImage(nullptr) {}
  ~PageElementImage() override;
  explicit PROTOBUF_CONSTEXPR PageElementImage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageElementImage(const PageElementImage& from);
  PageElementImage(PageElementImage&& from) noexcept
    : PageElementImage() {
    *this = ::std::move(from);
  }

  inline PageElementImage& operator=(const PageElementImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageElementImage& operator=(PageElementImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageElementImage& default_instance() {
    return *internal_default_instance();
  }
  enum PositionOneofCase {
    kPosition = 2,
    kPositionString = 3,
    POSITIONONEOF_NOT_SET = 0,
  };

  enum SizeOneofCase {
    kSize = 4,
    kSizeString = 5,
    SIZEONEOF_NOT_SET = 0,
  };

  static inline const PageElementImage* internal_default_instance() {
    return reinterpret_cast<const PageElementImage*>(
               &_PageElementImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PageElementImage& a, PageElementImage& b) {
    a.Swap(&b);
  }
  inline void Swap(PageElementImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageElementImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageElementImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageElementImage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageElementImage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageElementImage& from) {
    PageElementImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageElementImage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageElementImage";
  }
  protected:
  explicit PageElementImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kAlignmentEnumFieldNumber = 6,
    kPositionFieldNumber = 2,
    kPositionStringFieldNumber = 3,
    kSizeFieldNumber = 4,
    kSizeStringFieldNumber = 5,
  };
  // string image = 1;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // .proto.AlignmentEnum alignment_enum = 6;
  void clear_alignment_enum();
  ::proto::AlignmentEnum alignment_enum() const;
  void set_alignment_enum(::proto::AlignmentEnum value);
  private:
  ::proto::AlignmentEnum _internal_alignment_enum() const;
  void _internal_set_alignment_enum(::proto::AlignmentEnum value);
  public:

  // .proto.Vector2 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Vector2& position() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_position();
  ::proto::Vector2* mutable_position();
  void set_allocated_position(::proto::Vector2* position);
  private:
  const ::proto::Vector2& _internal_position() const;
  ::proto::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Vector2* position);
  ::proto::Vector2* unsafe_arena_release_position();

  // .proto.Vector2String position_string = 3;
  bool has_position_string() const;
  private:
  bool _internal_has_position_string() const;
  public:
  void clear_position_string();
  const ::proto::Vector2String& position_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_position_string();
  ::proto::Vector2String* mutable_position_string();
  void set_allocated_position_string(::proto::Vector2String* position_string);
  private:
  const ::proto::Vector2String& _internal_position_string() const;
  ::proto::Vector2String* _internal_mutable_position_string();
  public:
  void unsafe_arena_set_allocated_position_string(
      ::proto::Vector2String* position_string);
  ::proto::Vector2String* unsafe_arena_release_position_string();

  // .proto.Vector2 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::proto::Vector2& size() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_size();
  ::proto::Vector2* mutable_size();
  void set_allocated_size(::proto::Vector2* size);
  private:
  const ::proto::Vector2& _internal_size() const;
  ::proto::Vector2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::proto::Vector2* size);
  ::proto::Vector2* unsafe_arena_release_size();

  // .proto.Vector2String size_string = 5;
  bool has_size_string() const;
  private:
  bool _internal_has_size_string() const;
  public:
  void clear_size_string();
  const ::proto::Vector2String& size_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_size_string();
  ::proto::Vector2String* mutable_size_string();
  void set_allocated_size_string(::proto::Vector2String* size_string);
  private:
  const ::proto::Vector2String& _internal_size_string() const;
  ::proto::Vector2String* _internal_mutable_size_string();
  public:
  void unsafe_arena_set_allocated_size_string(
      ::proto::Vector2String* size_string);
  ::proto::Vector2String* unsafe_arena_release_size_string();

  void clear_PositionOneof();
  PositionOneofCase PositionOneof_case() const;
  void clear_SizeOneof();
  SizeOneofCase SizeOneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.PageElementImage)
 private:
  class _Internal;
  void set_has_position();
  void set_has_position_string();
  void set_has_size();
  void set_has_size_string();

  inline bool has_PositionOneof() const;
  inline void clear_has_PositionOneof();

  inline bool has_SizeOneof() const;
  inline void clear_has_SizeOneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    int alignment_enum_;
    union PositionOneofUnion {
      constexpr PositionOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* position_;
      ::proto::Vector2String* position_string_;
    } PositionOneof_;
    union SizeOneofUnion {
      constexpr SizeOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* size_;
      ::proto::Vector2String* size_string_;
    } SizeOneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageElementLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageElementLine) */ {
 public:
  inline PageElementLine() : PageElementLine(nullptr) {}
  ~PageElementLine() override;
  explicit PROTOBUF_CONSTEXPR PageElementLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageElementLine(const PageElementLine& from);
  PageElementLine(PageElementLine&& from) noexcept
    : PageElementLine() {
    *this = ::std::move(from);
  }

  inline PageElementLine& operator=(const PageElementLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageElementLine& operator=(PageElementLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageElementLine& default_instance() {
    return *internal_default_instance();
  }
  enum StartOneofCase {
    kStart = 1,
    kStartString = 2,
    STARTONEOF_NOT_SET = 0,
  };

  enum EndOneofCase {
    kEnd = 3,
    kEndString = 4,
    ENDONEOF_NOT_SET = 0,
  };

  enum ColorOneofCase {
    kColor = 5,
    kColorString = 6,
    COLORONEOF_NOT_SET = 0,
  };

  static inline const PageElementLine* internal_default_instance() {
    return reinterpret_cast<const PageElementLine*>(
               &_PageElementLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PageElementLine& a, PageElementLine& b) {
    a.Swap(&b);
  }
  inline void Swap(PageElementLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageElementLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageElementLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageElementLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageElementLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageElementLine& from) {
    PageElementLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageElementLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageElementLine";
  }
  protected:
  explicit PageElementLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThicknessFieldNumber = 7,
    kAlignmentEnumFieldNumber = 8,
    kStartFieldNumber = 1,
    kStartStringFieldNumber = 2,
    kEndFieldNumber = 3,
    kEndStringFieldNumber = 4,
    kColorFieldNumber = 5,
    kColorStringFieldNumber = 6,
  };
  // double thickness = 7;
  void clear_thickness();
  double thickness() const;
  void set_thickness(double value);
  private:
  double _internal_thickness() const;
  void _internal_set_thickness(double value);
  public:

  // .proto.AlignmentEnum alignment_enum = 8;
  void clear_alignment_enum();
  ::proto::AlignmentEnum alignment_enum() const;
  void set_alignment_enum(::proto::AlignmentEnum value);
  private:
  ::proto::AlignmentEnum _internal_alignment_enum() const;
  void _internal_set_alignment_enum(::proto::AlignmentEnum value);
  public:

  // .proto.Vector2 start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::proto::Vector2& start() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_start();
  ::proto::Vector2* mutable_start();
  void set_allocated_start(::proto::Vector2* start);
  private:
  const ::proto::Vector2& _internal_start() const;
  ::proto::Vector2* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::proto::Vector2* start);
  ::proto::Vector2* unsafe_arena_release_start();

  // .proto.Vector2String start_string = 2;
  bool has_start_string() const;
  private:
  bool _internal_has_start_string() const;
  public:
  void clear_start_string();
  const ::proto::Vector2String& start_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_start_string();
  ::proto::Vector2String* mutable_start_string();
  void set_allocated_start_string(::proto::Vector2String* start_string);
  private:
  const ::proto::Vector2String& _internal_start_string() const;
  ::proto::Vector2String* _internal_mutable_start_string();
  public:
  void unsafe_arena_set_allocated_start_string(
      ::proto::Vector2String* start_string);
  ::proto::Vector2String* unsafe_arena_release_start_string();

  // .proto.Vector2 end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::proto::Vector2& end() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_end();
  ::proto::Vector2* mutable_end();
  void set_allocated_end(::proto::Vector2* end);
  private:
  const ::proto::Vector2& _internal_end() const;
  ::proto::Vector2* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::proto::Vector2* end);
  ::proto::Vector2* unsafe_arena_release_end();

  // .proto.Vector2String end_string = 4;
  bool has_end_string() const;
  private:
  bool _internal_has_end_string() const;
  public:
  void clear_end_string();
  const ::proto::Vector2String& end_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_end_string();
  ::proto::Vector2String* mutable_end_string();
  void set_allocated_end_string(::proto::Vector2String* end_string);
  private:
  const ::proto::Vector2String& _internal_end_string() const;
  ::proto::Vector2String* _internal_mutable_end_string();
  public:
  void unsafe_arena_set_allocated_end_string(
      ::proto::Vector2String* end_string);
  ::proto::Vector2String* unsafe_arena_release_end_string();

  // .proto.Vector4 color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector4& color() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_color();
  ::proto::Vector4* mutable_color();
  void set_allocated_color(::proto::Vector4* color);
  private:
  const ::proto::Vector4& _internal_color() const;
  ::proto::Vector4* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector4* color);
  ::proto::Vector4* unsafe_arena_release_color();

  // .proto.ColorString color_string = 6;
  bool has_color_string() const;
  private:
  bool _internal_has_color_string() const;
  public:
  void clear_color_string();
  const ::proto::ColorString& color_string() const;
  PROTOBUF_NODISCARD ::proto::ColorString* release_color_string();
  ::proto::ColorString* mutable_color_string();
  void set_allocated_color_string(::proto::ColorString* color_string);
  private:
  const ::proto::ColorString& _internal_color_string() const;
  ::proto::ColorString* _internal_mutable_color_string();
  public:
  void unsafe_arena_set_allocated_color_string(
      ::proto::ColorString* color_string);
  ::proto::ColorString* unsafe_arena_release_color_string();

  void clear_StartOneof();
  StartOneofCase StartOneof_case() const;
  void clear_EndOneof();
  EndOneofCase EndOneof_case() const;
  void clear_ColorOneof();
  ColorOneofCase ColorOneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.PageElementLine)
 private:
  class _Internal;
  void set_has_start();
  void set_has_start_string();
  void set_has_end();
  void set_has_end_string();
  void set_has_color();
  void set_has_color_string();

  inline bool has_StartOneof() const;
  inline void clear_has_StartOneof();

  inline bool has_EndOneof() const;
  inline void clear_has_EndOneof();

  inline bool has_ColorOneof() const;
  inline void clear_has_ColorOneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double thickness_;
    int alignment_enum_;
    union StartOneofUnion {
      constexpr StartOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* start_;
      ::proto::Vector2String* start_string_;
    } StartOneof_;
    union EndOneofUnion {
      constexpr EndOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* end_;
      ::proto::Vector2String* end_string_;
    } EndOneof_;
    union ColorOneofUnion {
      constexpr ColorOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector4* color_;
      ::proto::ColorString* color_string_;
    } ColorOneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageElementRectFilled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageElementRectFilled) */ {
 public:
  inline PageElementRectFilled() : PageElementRectFilled(nullptr) {}
  ~PageElementRectFilled() override;
  explicit PROTOBUF_CONSTEXPR PageElementRectFilled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageElementRectFilled(const PageElementRectFilled& from);
  PageElementRectFilled(PageElementRectFilled&& from) noexcept
    : PageElementRectFilled() {
    *this = ::std::move(from);
  }

  inline PageElementRectFilled& operator=(const PageElementRectFilled& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageElementRectFilled& operator=(PageElementRectFilled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageElementRectFilled& default_instance() {
    return *internal_default_instance();
  }
  enum PositionOneofCase {
    kPosition = 1,
    kPositionString = 2,
    POSITIONONEOF_NOT_SET = 0,
  };

  enum SizeOneofCase {
    kSize = 3,
    kSizeString = 4,
    SIZEONEOF_NOT_SET = 0,
  };

  enum ColorOneofCase {
    kColor = 5,
    kColorString = 6,
    COLORONEOF_NOT_SET = 0,
  };

  static inline const PageElementRectFilled* internal_default_instance() {
    return reinterpret_cast<const PageElementRectFilled*>(
               &_PageElementRectFilled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PageElementRectFilled& a, PageElementRectFilled& b) {
    a.Swap(&b);
  }
  inline void Swap(PageElementRectFilled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageElementRectFilled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageElementRectFilled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageElementRectFilled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageElementRectFilled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageElementRectFilled& from) {
    PageElementRectFilled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageElementRectFilled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageElementRectFilled";
  }
  protected:
  explicit PageElementRectFilled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundingFieldNumber = 7,
    kAlignmentEnumFieldNumber = 8,
    kPositionFieldNumber = 1,
    kPositionStringFieldNumber = 2,
    kSizeFieldNumber = 3,
    kSizeStringFieldNumber = 4,
    kColorFieldNumber = 5,
    kColorStringFieldNumber = 6,
  };
  // double rounding = 7;
  void clear_rounding();
  double rounding() const;
  void set_rounding(double value);
  private:
  double _internal_rounding() const;
  void _internal_set_rounding(double value);
  public:

  // .proto.AlignmentEnum alignment_enum = 8;
  void clear_alignment_enum();
  ::proto::AlignmentEnum alignment_enum() const;
  void set_alignment_enum(::proto::AlignmentEnum value);
  private:
  ::proto::AlignmentEnum _internal_alignment_enum() const;
  void _internal_set_alignment_enum(::proto::AlignmentEnum value);
  public:

  // .proto.Vector2 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Vector2& position() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_position();
  ::proto::Vector2* mutable_position();
  void set_allocated_position(::proto::Vector2* position);
  private:
  const ::proto::Vector2& _internal_position() const;
  ::proto::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Vector2* position);
  ::proto::Vector2* unsafe_arena_release_position();

  // .proto.Vector2String position_string = 2;
  bool has_position_string() const;
  private:
  bool _internal_has_position_string() const;
  public:
  void clear_position_string();
  const ::proto::Vector2String& position_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_position_string();
  ::proto::Vector2String* mutable_position_string();
  void set_allocated_position_string(::proto::Vector2String* position_string);
  private:
  const ::proto::Vector2String& _internal_position_string() const;
  ::proto::Vector2String* _internal_mutable_position_string();
  public:
  void unsafe_arena_set_allocated_position_string(
      ::proto::Vector2String* position_string);
  ::proto::Vector2String* unsafe_arena_release_position_string();

  // .proto.Vector2 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::proto::Vector2& size() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_size();
  ::proto::Vector2* mutable_size();
  void set_allocated_size(::proto::Vector2* size);
  private:
  const ::proto::Vector2& _internal_size() const;
  ::proto::Vector2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::proto::Vector2* size);
  ::proto::Vector2* unsafe_arena_release_size();

  // .proto.Vector2String size_string = 4;
  bool has_size_string() const;
  private:
  bool _internal_has_size_string() const;
  public:
  void clear_size_string();
  const ::proto::Vector2String& size_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_size_string();
  ::proto::Vector2String* mutable_size_string();
  void set_allocated_size_string(::proto::Vector2String* size_string);
  private:
  const ::proto::Vector2String& _internal_size_string() const;
  ::proto::Vector2String* _internal_mutable_size_string();
  public:
  void unsafe_arena_set_allocated_size_string(
      ::proto::Vector2String* size_string);
  ::proto::Vector2String* unsafe_arena_release_size_string();

  // .proto.Vector4 color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::proto::Vector4& color() const;
  PROTOBUF_NODISCARD ::proto::Vector4* release_color();
  ::proto::Vector4* mutable_color();
  void set_allocated_color(::proto::Vector4* color);
  private:
  const ::proto::Vector4& _internal_color() const;
  ::proto::Vector4* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::proto::Vector4* color);
  ::proto::Vector4* unsafe_arena_release_color();

  // .proto.ColorString color_string = 6;
  bool has_color_string() const;
  private:
  bool _internal_has_color_string() const;
  public:
  void clear_color_string();
  const ::proto::ColorString& color_string() const;
  PROTOBUF_NODISCARD ::proto::ColorString* release_color_string();
  ::proto::ColorString* mutable_color_string();
  void set_allocated_color_string(::proto::ColorString* color_string);
  private:
  const ::proto::ColorString& _internal_color_string() const;
  ::proto::ColorString* _internal_mutable_color_string();
  public:
  void unsafe_arena_set_allocated_color_string(
      ::proto::ColorString* color_string);
  ::proto::ColorString* unsafe_arena_release_color_string();

  void clear_PositionOneof();
  PositionOneofCase PositionOneof_case() const;
  void clear_SizeOneof();
  SizeOneofCase SizeOneof_case() const;
  void clear_ColorOneof();
  ColorOneofCase ColorOneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.PageElementRectFilled)
 private:
  class _Internal;
  void set_has_position();
  void set_has_position_string();
  void set_has_size();
  void set_has_size_string();
  void set_has_color();
  void set_has_color_string();

  inline bool has_PositionOneof() const;
  inline void clear_has_PositionOneof();

  inline bool has_SizeOneof() const;
  inline void clear_has_SizeOneof();

  inline bool has_ColorOneof() const;
  inline void clear_has_ColorOneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double rounding_;
    int alignment_enum_;
    union PositionOneofUnion {
      constexpr PositionOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* position_;
      ::proto::Vector2String* position_string_;
    } PositionOneof_;
    union SizeOneofUnion {
      constexpr SizeOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* size_;
      ::proto::Vector2String* size_string_;
    } SizeOneof_;
    union ColorOneofUnion {
      constexpr ColorOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector4* color_;
      ::proto::ColorString* color_string_;
    } ColorOneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageElementList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageElementList) */ {
 public:
  inline PageElementList() : PageElementList(nullptr) {}
  ~PageElementList() override;
  explicit PROTOBUF_CONSTEXPR PageElementList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageElementList(const PageElementList& from);
  PageElementList(PageElementList&& from) noexcept
    : PageElementList() {
    *this = ::std::move(from);
  }

  inline PageElementList& operator=(const PageElementList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageElementList& operator=(PageElementList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageElementList& default_instance() {
    return *internal_default_instance();
  }
  enum PositionOneofCase {
    kPosition = 3,
    kPositionString = 4,
    POSITIONONEOF_NOT_SET = 0,
  };

  enum SizeOneofCase {
    kSize = 5,
    kSizeString = 6,
    SIZEONEOF_NOT_SET = 0,
  };

  static inline const PageElementList* internal_default_instance() {
    return reinterpret_cast<const PageElementList*>(
               &_PageElementList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PageElementList& a, PageElementList& b) {
    a.Swap(&b);
  }
  inline void Swap(PageElementList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageElementList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageElementList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageElementList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageElementList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageElementList& from) {
    PageElementList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageElementList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageElementList";
  }
  protected:
  explicit PageElementList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageElementsFieldNumber = 7,
    kElementCountFieldNumber = 1,
    kElementIndexFieldNumber = 2,
    kPositionFieldNumber = 3,
    kPositionStringFieldNumber = 4,
    kSizeFieldNumber = 5,
    kSizeStringFieldNumber = 6,
  };
  // repeated .proto.PageElement page_elements = 7;
  int page_elements_size() const;
  private:
  int _internal_page_elements_size() const;
  public:
  void clear_page_elements();
  ::proto::PageElement* mutable_page_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >*
      mutable_page_elements();
  private:
  const ::proto::PageElement& _internal_page_elements(int index) const;
  ::proto::PageElement* _internal_add_page_elements();
  public:
  const ::proto::PageElement& page_elements(int index) const;
  ::proto::PageElement* add_page_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >&
      page_elements() const;

  // string element_count = 1;
  void clear_element_count();
  const std::string& element_count() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_element_count(ArgT0&& arg0, ArgT... args);
  std::string* mutable_element_count();
  PROTOBUF_NODISCARD std::string* release_element_count();
  void set_allocated_element_count(std::string* element_count);
  private:
  const std::string& _internal_element_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_element_count(const std::string& value);
  std::string* _internal_mutable_element_count();
  public:

  // string element_index = 2;
  void clear_element_index();
  const std::string& element_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_element_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_element_index();
  PROTOBUF_NODISCARD std::string* release_element_index();
  void set_allocated_element_index(std::string* element_index);
  private:
  const std::string& _internal_element_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_element_index(const std::string& value);
  std::string* _internal_mutable_element_index();
  public:

  // .proto.Vector2 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Vector2& position() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_position();
  ::proto::Vector2* mutable_position();
  void set_allocated_position(::proto::Vector2* position);
  private:
  const ::proto::Vector2& _internal_position() const;
  ::proto::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Vector2* position);
  ::proto::Vector2* unsafe_arena_release_position();

  // .proto.Vector2String position_string = 4;
  bool has_position_string() const;
  private:
  bool _internal_has_position_string() const;
  public:
  void clear_position_string();
  const ::proto::Vector2String& position_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_position_string();
  ::proto::Vector2String* mutable_position_string();
  void set_allocated_position_string(::proto::Vector2String* position_string);
  private:
  const ::proto::Vector2String& _internal_position_string() const;
  ::proto::Vector2String* _internal_mutable_position_string();
  public:
  void unsafe_arena_set_allocated_position_string(
      ::proto::Vector2String* position_string);
  ::proto::Vector2String* unsafe_arena_release_position_string();

  // .proto.Vector2 size = 5;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::proto::Vector2& size() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_size();
  ::proto::Vector2* mutable_size();
  void set_allocated_size(::proto::Vector2* size);
  private:
  const ::proto::Vector2& _internal_size() const;
  ::proto::Vector2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::proto::Vector2* size);
  ::proto::Vector2* unsafe_arena_release_size();

  // .proto.Vector2String size_string = 6;
  bool has_size_string() const;
  private:
  bool _internal_has_size_string() const;
  public:
  void clear_size_string();
  const ::proto::Vector2String& size_string() const;
  PROTOBUF_NODISCARD ::proto::Vector2String* release_size_string();
  ::proto::Vector2String* mutable_size_string();
  void set_allocated_size_string(::proto::Vector2String* size_string);
  private:
  const ::proto::Vector2String& _internal_size_string() const;
  ::proto::Vector2String* _internal_mutable_size_string();
  public:
  void unsafe_arena_set_allocated_size_string(
      ::proto::Vector2String* size_string);
  ::proto::Vector2String* unsafe_arena_release_size_string();

  void clear_PositionOneof();
  PositionOneofCase PositionOneof_case() const;
  void clear_SizeOneof();
  SizeOneofCase SizeOneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.PageElementList)
 private:
  class _Internal;
  void set_has_position();
  void set_has_position_string();
  void set_has_size();
  void set_has_size_string();

  inline bool has_PositionOneof() const;
  inline void clear_has_PositionOneof();

  inline bool has_SizeOneof() const;
  inline void clear_has_SizeOneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement > page_elements_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr element_count_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr element_index_;
    union PositionOneofUnion {
      constexpr PositionOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* position_;
      ::proto::Vector2String* position_string_;
    } PositionOneof_;
    union SizeOneofUnion {
      constexpr SizeOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::Vector2* size_;
      ::proto::Vector2String* size_string_;
    } SizeOneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageElement) */ {
 public:
  inline PageElement() : PageElement(nullptr) {}
  ~PageElement() override;
  explicit PROTOBUF_CONSTEXPR PageElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageElement(const PageElement& from);
  PageElement(PageElement&& from) noexcept
    : PageElement() {
    *this = ::std::move(from);
  }

  inline PageElement& operator=(const PageElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageElement& operator=(PageElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageElement& default_instance() {
    return *internal_default_instance();
  }
  enum PageElementOneofCase {
    kText = 1,
    kImage = 2,
    kLine = 3,
    kRectFilled = 4,
    kList = 5,
    PAGEELEMENTONEOF_NOT_SET = 0,
  };

  static inline const PageElement* internal_default_instance() {
    return reinterpret_cast<const PageElement*>(
               &_PageElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PageElement& a, PageElement& b) {
    a.Swap(&b);
  }
  inline void Swap(PageElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageElement& from) {
    PageElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageElement";
  }
  protected:
  explicit PageElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kImageFieldNumber = 2,
    kLineFieldNumber = 3,
    kRectFilledFieldNumber = 4,
    kListFieldNumber = 5,
  };
  // .proto.PageElementText text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::proto::PageElementText& text() const;
  PROTOBUF_NODISCARD ::proto::PageElementText* release_text();
  ::proto::PageElementText* mutable_text();
  void set_allocated_text(::proto::PageElementText* text);
  private:
  const ::proto::PageElementText& _internal_text() const;
  ::proto::PageElementText* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::proto::PageElementText* text);
  ::proto::PageElementText* unsafe_arena_release_text();

  // .proto.PageElementImage image = 2;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::proto::PageElementImage& image() const;
  PROTOBUF_NODISCARD ::proto::PageElementImage* release_image();
  ::proto::PageElementImage* mutable_image();
  void set_allocated_image(::proto::PageElementImage* image);
  private:
  const ::proto::PageElementImage& _internal_image() const;
  ::proto::PageElementImage* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::proto::PageElementImage* image);
  ::proto::PageElementImage* unsafe_arena_release_image();

  // .proto.PageElementLine line = 3;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  const ::proto::PageElementLine& line() const;
  PROTOBUF_NODISCARD ::proto::PageElementLine* release_line();
  ::proto::PageElementLine* mutable_line();
  void set_allocated_line(::proto::PageElementLine* line);
  private:
  const ::proto::PageElementLine& _internal_line() const;
  ::proto::PageElementLine* _internal_mutable_line();
  public:
  void unsafe_arena_set_allocated_line(
      ::proto::PageElementLine* line);
  ::proto::PageElementLine* unsafe_arena_release_line();

  // .proto.PageElementRectFilled rect_filled = 4;
  bool has_rect_filled() const;
  private:
  bool _internal_has_rect_filled() const;
  public:
  void clear_rect_filled();
  const ::proto::PageElementRectFilled& rect_filled() const;
  PROTOBUF_NODISCARD ::proto::PageElementRectFilled* release_rect_filled();
  ::proto::PageElementRectFilled* mutable_rect_filled();
  void set_allocated_rect_filled(::proto::PageElementRectFilled* rect_filled);
  private:
  const ::proto::PageElementRectFilled& _internal_rect_filled() const;
  ::proto::PageElementRectFilled* _internal_mutable_rect_filled();
  public:
  void unsafe_arena_set_allocated_rect_filled(
      ::proto::PageElementRectFilled* rect_filled);
  ::proto::PageElementRectFilled* unsafe_arena_release_rect_filled();

  // .proto.PageElementList list = 5;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::proto::PageElementList& list() const;
  PROTOBUF_NODISCARD ::proto::PageElementList* release_list();
  ::proto::PageElementList* mutable_list();
  void set_allocated_list(::proto::PageElementList* list);
  private:
  const ::proto::PageElementList& _internal_list() const;
  ::proto::PageElementList* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::proto::PageElementList* list);
  ::proto::PageElementList* unsafe_arena_release_list();

  void clear_PageElementOneof();
  PageElementOneofCase PageElementOneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.PageElement)
 private:
  class _Internal;
  void set_has_text();
  void set_has_image();
  void set_has_line();
  void set_has_rect_filled();
  void set_has_list();

  inline bool has_PageElementOneof() const;
  inline void clear_has_PageElementOneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PageElementOneofUnion {
      constexpr PageElementOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::proto::PageElementText* text_;
      ::proto::PageElementImage* image_;
      ::proto::PageElementLine* line_;
      ::proto::PageElementRectFilled* rect_filled_;
      ::proto::PageElementList* list_;
    } PageElementOneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// -------------------------------------------------------------------

class PageDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PageDescription) */ {
 public:
  inline PageDescription() : PageDescription(nullptr) {}
  ~PageDescription() override;
  explicit PROTOBUF_CONSTEXPR PageDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageDescription(const PageDescription& from);
  PageDescription(PageDescription&& from) noexcept
    : PageDescription() {
    *this = ::std::move(from);
  }

  inline PageDescription& operator=(const PageDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageDescription& operator=(PageDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageDescription* internal_default_instance() {
    return reinterpret_cast<const PageDescription*>(
               &_PageDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PageDescription& a, PageDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(PageDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageDescription& from) {
    PageDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PageDescription";
  }
  protected:
  explicit PageDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageElementsFieldNumber = 3,
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated .proto.PageElement page_elements = 3;
  int page_elements_size() const;
  private:
  int _internal_page_elements_size() const;
  public:
  void clear_page_elements();
  ::proto::PageElement* mutable_page_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >*
      mutable_page_elements();
  private:
  const ::proto::PageElement& _internal_page_elements(int index) const;
  ::proto::PageElement* _internal_add_page_elements();
  public:
  const ::proto::PageElement& page_elements(int index) const;
  ::proto::PageElement* add_page_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >&
      page_elements() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .proto.Vector2 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::proto::Vector2& size() const;
  PROTOBUF_NODISCARD ::proto::Vector2* release_size();
  ::proto::Vector2* mutable_size();
  void set_allocated_size(::proto::Vector2* size);
  private:
  const ::proto::Vector2& _internal_size() const;
  ::proto::Vector2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::proto::Vector2* size);
  ::proto::Vector2* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:proto.PageDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement > page_elements_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::proto::Vector2* size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FontSize

// .proto.TextSizeEnum text_size_enum = 1;
inline void FontSize::clear_text_size_enum() {
  _impl_.text_size_enum_ = 0;
}
inline ::proto::TextSizeEnum FontSize::_internal_text_size_enum() const {
  return static_cast< ::proto::TextSizeEnum >(_impl_.text_size_enum_);
}
inline ::proto::TextSizeEnum FontSize::text_size_enum() const {
  // @@protoc_insertion_point(field_get:proto.FontSize.text_size_enum)
  return _internal_text_size_enum();
}
inline void FontSize::_internal_set_text_size_enum(::proto::TextSizeEnum value) {
  
  _impl_.text_size_enum_ = value;
}
inline void FontSize::set_text_size_enum(::proto::TextSizeEnum value) {
  _internal_set_text_size_enum(value);
  // @@protoc_insertion_point(field_set:proto.FontSize.text_size_enum)
}

// double size = 2;
inline void FontSize::clear_size() {
  _impl_.size_ = 0;
}
inline double FontSize::_internal_size() const {
  return _impl_.size_;
}
inline double FontSize::size() const {
  // @@protoc_insertion_point(field_get:proto.FontSize.size)
  return _internal_size();
}
inline void FontSize::_internal_set_size(double value) {
  
  _impl_.size_ = value;
}
inline void FontSize::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:proto.FontSize.size)
}

// -------------------------------------------------------------------

// ClientParameter

// string server_name = 1;
inline void ClientParameter::clear_server_name() {
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& ClientParameter::server_name() const {
  // @@protoc_insertion_point(field_get:proto.ClientParameter.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientParameter::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ClientParameter.server_name)
}
inline std::string* ClientParameter::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:proto.ClientParameter.server_name)
  return _s;
}
inline const std::string& ClientParameter::_internal_server_name() const {
  return _impl_.server_name_.Get();
}
inline void ClientParameter::_internal_set_server_name(const std::string& value) {
  
  _impl_.server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientParameter::_internal_mutable_server_name() {
  
  return _impl_.server_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientParameter::release_server_name() {
  // @@protoc_insertion_point(field_release:proto.ClientParameter.server_name)
  return _impl_.server_name_.Release();
}
inline void ClientParameter::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  _impl_.server_name_.SetAllocated(server_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_name_.IsDefault()) {
    _impl_.server_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ClientParameter.server_name)
}

// string font_file = 2;
inline void ClientParameter::clear_font_file() {
  _impl_.font_file_.ClearToEmpty();
}
inline const std::string& ClientParameter::font_file() const {
  // @@protoc_insertion_point(field_get:proto.ClientParameter.font_file)
  return _internal_font_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientParameter::set_font_file(ArgT0&& arg0, ArgT... args) {
 
 _impl_.font_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ClientParameter.font_file)
}
inline std::string* ClientParameter::mutable_font_file() {
  std::string* _s = _internal_mutable_font_file();
  // @@protoc_insertion_point(field_mutable:proto.ClientParameter.font_file)
  return _s;
}
inline const std::string& ClientParameter::_internal_font_file() const {
  return _impl_.font_file_.Get();
}
inline void ClientParameter::_internal_set_font_file(const std::string& value) {
  
  _impl_.font_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientParameter::_internal_mutable_font_file() {
  
  return _impl_.font_file_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientParameter::release_font_file() {
  // @@protoc_insertion_point(field_release:proto.ClientParameter.font_file)
  return _impl_.font_file_.Release();
}
inline void ClientParameter::set_allocated_font_file(std::string* font_file) {
  if (font_file != nullptr) {
    
  } else {
    
  }
  _impl_.font_file_.SetAllocated(font_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.font_file_.IsDefault()) {
    _impl_.font_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ClientParameter.font_file)
}

// repeated .proto.FontSize font_sizes = 3;
inline int ClientParameter::_internal_font_sizes_size() const {
  return _impl_.font_sizes_.size();
}
inline int ClientParameter::font_sizes_size() const {
  return _internal_font_sizes_size();
}
inline void ClientParameter::clear_font_sizes() {
  _impl_.font_sizes_.Clear();
}
inline ::proto::FontSize* ClientParameter::mutable_font_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ClientParameter.font_sizes)
  return _impl_.font_sizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FontSize >*
ClientParameter::mutable_font_sizes() {
  // @@protoc_insertion_point(field_mutable_list:proto.ClientParameter.font_sizes)
  return &_impl_.font_sizes_;
}
inline const ::proto::FontSize& ClientParameter::_internal_font_sizes(int index) const {
  return _impl_.font_sizes_.Get(index);
}
inline const ::proto::FontSize& ClientParameter::font_sizes(int index) const {
  // @@protoc_insertion_point(field_get:proto.ClientParameter.font_sizes)
  return _internal_font_sizes(index);
}
inline ::proto::FontSize* ClientParameter::_internal_add_font_sizes() {
  return _impl_.font_sizes_.Add();
}
inline ::proto::FontSize* ClientParameter::add_font_sizes() {
  ::proto::FontSize* _add = _internal_add_font_sizes();
  // @@protoc_insertion_point(field_add:proto.ClientParameter.font_sizes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FontSize >&
ClientParameter::font_sizes() const {
  // @@protoc_insertion_point(field_list:proto.ClientParameter.font_sizes)
  return _impl_.font_sizes_;
}

// .proto.PageDescription overlay_title = 4;
inline bool ClientParameter::_internal_has_overlay_title() const {
  return this != internal_default_instance() && _impl_.overlay_title_ != nullptr;
}
inline bool ClientParameter::has_overlay_title() const {
  return _internal_has_overlay_title();
}
inline void ClientParameter::clear_overlay_title() {
  if (GetArenaForAllocation() == nullptr && _impl_.overlay_title_ != nullptr) {
    delete _impl_.overlay_title_;
  }
  _impl_.overlay_title_ = nullptr;
}
inline const ::proto::PageDescription& ClientParameter::_internal_overlay_title() const {
  const ::proto::PageDescription* p = _impl_.overlay_title_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PageDescription&>(
      ::proto::_PageDescription_default_instance_);
}
inline const ::proto::PageDescription& ClientParameter::overlay_title() const {
  // @@protoc_insertion_point(field_get:proto.ClientParameter.overlay_title)
  return _internal_overlay_title();
}
inline void ClientParameter::unsafe_arena_set_allocated_overlay_title(
    ::proto::PageDescription* overlay_title) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overlay_title_);
  }
  _impl_.overlay_title_ = overlay_title;
  if (overlay_title) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientParameter.overlay_title)
}
inline ::proto::PageDescription* ClientParameter::release_overlay_title() {
  
  ::proto::PageDescription* temp = _impl_.overlay_title_;
  _impl_.overlay_title_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PageDescription* ClientParameter::unsafe_arena_release_overlay_title() {
  // @@protoc_insertion_point(field_release:proto.ClientParameter.overlay_title)
  
  ::proto::PageDescription* temp = _impl_.overlay_title_;
  _impl_.overlay_title_ = nullptr;
  return temp;
}
inline ::proto::PageDescription* ClientParameter::_internal_mutable_overlay_title() {
  
  if (_impl_.overlay_title_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PageDescription>(GetArenaForAllocation());
    _impl_.overlay_title_ = p;
  }
  return _impl_.overlay_title_;
}
inline ::proto::PageDescription* ClientParameter::mutable_overlay_title() {
  ::proto::PageDescription* _msg = _internal_mutable_overlay_title();
  // @@protoc_insertion_point(field_mutable:proto.ClientParameter.overlay_title)
  return _msg;
}
inline void ClientParameter::set_allocated_overlay_title(::proto::PageDescription* overlay_title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.overlay_title_;
  }
  if (overlay_title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlay_title);
    if (message_arena != submessage_arena) {
      overlay_title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_title, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.overlay_title_ = overlay_title;
  // @@protoc_insertion_point(field_set_allocated:proto.ClientParameter.overlay_title)
}

// .proto.PageDescription overlay_state = 5;
inline bool ClientParameter::_internal_has_overlay_state() const {
  return this != internal_default_instance() && _impl_.overlay_state_ != nullptr;
}
inline bool ClientParameter::has_overlay_state() const {
  return _internal_has_overlay_state();
}
inline void ClientParameter::clear_overlay_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.overlay_state_ != nullptr) {
    delete _impl_.overlay_state_;
  }
  _impl_.overlay_state_ = nullptr;
}
inline const ::proto::PageDescription& ClientParameter::_internal_overlay_state() const {
  const ::proto::PageDescription* p = _impl_.overlay_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PageDescription&>(
      ::proto::_PageDescription_default_instance_);
}
inline const ::proto::PageDescription& ClientParameter::overlay_state() const {
  // @@protoc_insertion_point(field_get:proto.ClientParameter.overlay_state)
  return _internal_overlay_state();
}
inline void ClientParameter::unsafe_arena_set_allocated_overlay_state(
    ::proto::PageDescription* overlay_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overlay_state_);
  }
  _impl_.overlay_state_ = overlay_state;
  if (overlay_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientParameter.overlay_state)
}
inline ::proto::PageDescription* ClientParameter::release_overlay_state() {
  
  ::proto::PageDescription* temp = _impl_.overlay_state_;
  _impl_.overlay_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PageDescription* ClientParameter::unsafe_arena_release_overlay_state() {
  // @@protoc_insertion_point(field_release:proto.ClientParameter.overlay_state)
  
  ::proto::PageDescription* temp = _impl_.overlay_state_;
  _impl_.overlay_state_ = nullptr;
  return temp;
}
inline ::proto::PageDescription* ClientParameter::_internal_mutable_overlay_state() {
  
  if (_impl_.overlay_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PageDescription>(GetArenaForAllocation());
    _impl_.overlay_state_ = p;
  }
  return _impl_.overlay_state_;
}
inline ::proto::PageDescription* ClientParameter::mutable_overlay_state() {
  ::proto::PageDescription* _msg = _internal_mutable_overlay_state();
  // @@protoc_insertion_point(field_mutable:proto.ClientParameter.overlay_state)
  return _msg;
}
inline void ClientParameter::set_allocated_overlay_state(::proto::PageDescription* overlay_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.overlay_state_;
  }
  if (overlay_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlay_state);
    if (message_arena != submessage_arena) {
      overlay_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.overlay_state_ = overlay_state;
  // @@protoc_insertion_point(field_set_allocated:proto.ClientParameter.overlay_state)
}

// .proto.PageDescription overlay_play = 6;
inline bool ClientParameter::_internal_has_overlay_play() const {
  return this != internal_default_instance() && _impl_.overlay_play_ != nullptr;
}
inline bool ClientParameter::has_overlay_play() const {
  return _internal_has_overlay_play();
}
inline void ClientParameter::clear_overlay_play() {
  if (GetArenaForAllocation() == nullptr && _impl_.overlay_play_ != nullptr) {
    delete _impl_.overlay_play_;
  }
  _impl_.overlay_play_ = nullptr;
}
inline const ::proto::PageDescription& ClientParameter::_internal_overlay_play() const {
  const ::proto::PageDescription* p = _impl_.overlay_play_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PageDescription&>(
      ::proto::_PageDescription_default_instance_);
}
inline const ::proto::PageDescription& ClientParameter::overlay_play() const {
  // @@protoc_insertion_point(field_get:proto.ClientParameter.overlay_play)
  return _internal_overlay_play();
}
inline void ClientParameter::unsafe_arena_set_allocated_overlay_play(
    ::proto::PageDescription* overlay_play) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.overlay_play_);
  }
  _impl_.overlay_play_ = overlay_play;
  if (overlay_play) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ClientParameter.overlay_play)
}
inline ::proto::PageDescription* ClientParameter::release_overlay_play() {
  
  ::proto::PageDescription* temp = _impl_.overlay_play_;
  _impl_.overlay_play_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PageDescription* ClientParameter::unsafe_arena_release_overlay_play() {
  // @@protoc_insertion_point(field_release:proto.ClientParameter.overlay_play)
  
  ::proto::PageDescription* temp = _impl_.overlay_play_;
  _impl_.overlay_play_ = nullptr;
  return temp;
}
inline ::proto::PageDescription* ClientParameter::_internal_mutable_overlay_play() {
  
  if (_impl_.overlay_play_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PageDescription>(GetArenaForAllocation());
    _impl_.overlay_play_ = p;
  }
  return _impl_.overlay_play_;
}
inline ::proto::PageDescription* ClientParameter::mutable_overlay_play() {
  ::proto::PageDescription* _msg = _internal_mutable_overlay_play();
  // @@protoc_insertion_point(field_mutable:proto.ClientParameter.overlay_play)
  return _msg;
}
inline void ClientParameter::set_allocated_overlay_play(::proto::PageDescription* overlay_play) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.overlay_play_;
  }
  if (overlay_play) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overlay_play);
    if (message_arena != submessage_arena) {
      overlay_play = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_play, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.overlay_play_ = overlay_play;
  // @@protoc_insertion_point(field_set_allocated:proto.ClientParameter.overlay_play)
}

// -------------------------------------------------------------------

// ColorString

// string red = 1;
inline void ColorString::clear_red() {
  _impl_.red_.ClearToEmpty();
}
inline const std::string& ColorString::red() const {
  // @@protoc_insertion_point(field_get:proto.ColorString.red)
  return _internal_red();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorString::set_red(ArgT0&& arg0, ArgT... args) {
 
 _impl_.red_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ColorString.red)
}
inline std::string* ColorString::mutable_red() {
  std::string* _s = _internal_mutable_red();
  // @@protoc_insertion_point(field_mutable:proto.ColorString.red)
  return _s;
}
inline const std::string& ColorString::_internal_red() const {
  return _impl_.red_.Get();
}
inline void ColorString::_internal_set_red(const std::string& value) {
  
  _impl_.red_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorString::_internal_mutable_red() {
  
  return _impl_.red_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorString::release_red() {
  // @@protoc_insertion_point(field_release:proto.ColorString.red)
  return _impl_.red_.Release();
}
inline void ColorString::set_allocated_red(std::string* red) {
  if (red != nullptr) {
    
  } else {
    
  }
  _impl_.red_.SetAllocated(red, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.red_.IsDefault()) {
    _impl_.red_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ColorString.red)
}

// string green = 2;
inline void ColorString::clear_green() {
  _impl_.green_.ClearToEmpty();
}
inline const std::string& ColorString::green() const {
  // @@protoc_insertion_point(field_get:proto.ColorString.green)
  return _internal_green();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorString::set_green(ArgT0&& arg0, ArgT... args) {
 
 _impl_.green_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ColorString.green)
}
inline std::string* ColorString::mutable_green() {
  std::string* _s = _internal_mutable_green();
  // @@protoc_insertion_point(field_mutable:proto.ColorString.green)
  return _s;
}
inline const std::string& ColorString::_internal_green() const {
  return _impl_.green_.Get();
}
inline void ColorString::_internal_set_green(const std::string& value) {
  
  _impl_.green_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorString::_internal_mutable_green() {
  
  return _impl_.green_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorString::release_green() {
  // @@protoc_insertion_point(field_release:proto.ColorString.green)
  return _impl_.green_.Release();
}
inline void ColorString::set_allocated_green(std::string* green) {
  if (green != nullptr) {
    
  } else {
    
  }
  _impl_.green_.SetAllocated(green, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.green_.IsDefault()) {
    _impl_.green_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ColorString.green)
}

// string blue = 3;
inline void ColorString::clear_blue() {
  _impl_.blue_.ClearToEmpty();
}
inline const std::string& ColorString::blue() const {
  // @@protoc_insertion_point(field_get:proto.ColorString.blue)
  return _internal_blue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorString::set_blue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ColorString.blue)
}
inline std::string* ColorString::mutable_blue() {
  std::string* _s = _internal_mutable_blue();
  // @@protoc_insertion_point(field_mutable:proto.ColorString.blue)
  return _s;
}
inline const std::string& ColorString::_internal_blue() const {
  return _impl_.blue_.Get();
}
inline void ColorString::_internal_set_blue(const std::string& value) {
  
  _impl_.blue_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorString::_internal_mutable_blue() {
  
  return _impl_.blue_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorString::release_blue() {
  // @@protoc_insertion_point(field_release:proto.ColorString.blue)
  return _impl_.blue_.Release();
}
inline void ColorString::set_allocated_blue(std::string* blue) {
  if (blue != nullptr) {
    
  } else {
    
  }
  _impl_.blue_.SetAllocated(blue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blue_.IsDefault()) {
    _impl_.blue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ColorString.blue)
}

// string alpha = 4;
inline void ColorString::clear_alpha() {
  _impl_.alpha_.ClearToEmpty();
}
inline const std::string& ColorString::alpha() const {
  // @@protoc_insertion_point(field_get:proto.ColorString.alpha)
  return _internal_alpha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ColorString::set_alpha(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alpha_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ColorString.alpha)
}
inline std::string* ColorString::mutable_alpha() {
  std::string* _s = _internal_mutable_alpha();
  // @@protoc_insertion_point(field_mutable:proto.ColorString.alpha)
  return _s;
}
inline const std::string& ColorString::_internal_alpha() const {
  return _impl_.alpha_.Get();
}
inline void ColorString::_internal_set_alpha(const std::string& value) {
  
  _impl_.alpha_.Set(value, GetArenaForAllocation());
}
inline std::string* ColorString::_internal_mutable_alpha() {
  
  return _impl_.alpha_.Mutable(GetArenaForAllocation());
}
inline std::string* ColorString::release_alpha() {
  // @@protoc_insertion_point(field_release:proto.ColorString.alpha)
  return _impl_.alpha_.Release();
}
inline void ColorString::set_allocated_alpha(std::string* alpha) {
  if (alpha != nullptr) {
    
  } else {
    
  }
  _impl_.alpha_.SetAllocated(alpha, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alpha_.IsDefault()) {
    _impl_.alpha_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ColorString.alpha)
}

// -------------------------------------------------------------------

// Vector2String

// string x = 1;
inline void Vector2String::clear_x() {
  _impl_.x_.ClearToEmpty();
}
inline const std::string& Vector2String::x() const {
  // @@protoc_insertion_point(field_get:proto.Vector2String.x)
  return _internal_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vector2String::set_x(ArgT0&& arg0, ArgT... args) {
 
 _impl_.x_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Vector2String.x)
}
inline std::string* Vector2String::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:proto.Vector2String.x)
  return _s;
}
inline const std::string& Vector2String::_internal_x() const {
  return _impl_.x_.Get();
}
inline void Vector2String::_internal_set_x(const std::string& value) {
  
  _impl_.x_.Set(value, GetArenaForAllocation());
}
inline std::string* Vector2String::_internal_mutable_x() {
  
  return _impl_.x_.Mutable(GetArenaForAllocation());
}
inline std::string* Vector2String::release_x() {
  // @@protoc_insertion_point(field_release:proto.Vector2String.x)
  return _impl_.x_.Release();
}
inline void Vector2String::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  _impl_.x_.SetAllocated(x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x_.IsDefault()) {
    _impl_.x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Vector2String.x)
}

// string y = 2;
inline void Vector2String::clear_y() {
  _impl_.y_.ClearToEmpty();
}
inline const std::string& Vector2String::y() const {
  // @@protoc_insertion_point(field_get:proto.Vector2String.y)
  return _internal_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vector2String::set_y(ArgT0&& arg0, ArgT... args) {
 
 _impl_.y_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Vector2String.y)
}
inline std::string* Vector2String::mutable_y() {
  std::string* _s = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:proto.Vector2String.y)
  return _s;
}
inline const std::string& Vector2String::_internal_y() const {
  return _impl_.y_.Get();
}
inline void Vector2String::_internal_set_y(const std::string& value) {
  
  _impl_.y_.Set(value, GetArenaForAllocation());
}
inline std::string* Vector2String::_internal_mutable_y() {
  
  return _impl_.y_.Mutable(GetArenaForAllocation());
}
inline std::string* Vector2String::release_y() {
  // @@protoc_insertion_point(field_release:proto.Vector2String.y)
  return _impl_.y_.Release();
}
inline void Vector2String::set_allocated_y(std::string* y) {
  if (y != nullptr) {
    
  } else {
    
  }
  _impl_.y_.SetAllocated(y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.y_.IsDefault()) {
    _impl_.y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Vector2String.y)
}

// -------------------------------------------------------------------

// PageElementDecoration

// .proto.Vector2 offset = 1;
inline bool PageElementDecoration::_internal_has_offset() const {
  return OffsetOneof_case() == kOffset;
}
inline bool PageElementDecoration::has_offset() const {
  return _internal_has_offset();
}
inline void PageElementDecoration::set_has_offset() {
  _impl_._oneof_case_[0] = kOffset;
}
inline ::proto::Vector2* PageElementDecoration::release_offset() {
  // @@protoc_insertion_point(field_release:proto.PageElementDecoration.offset)
  if (_internal_has_offset()) {
    clear_has_OffsetOneof();
    ::proto::Vector2* temp = _impl_.OffsetOneof_.offset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.OffsetOneof_.offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementDecoration::_internal_offset() const {
  return _internal_has_offset()
      ? *_impl_.OffsetOneof_.offset_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementDecoration::offset() const {
  // @@protoc_insertion_point(field_get:proto.PageElementDecoration.offset)
  return _internal_offset();
}
inline ::proto::Vector2* PageElementDecoration::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementDecoration.offset)
  if (_internal_has_offset()) {
    clear_has_OffsetOneof();
    ::proto::Vector2* temp = _impl_.OffsetOneof_.offset_;
    _impl_.OffsetOneof_.offset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementDecoration::unsafe_arena_set_allocated_offset(::proto::Vector2* offset) {
  clear_OffsetOneof();
  if (offset) {
    set_has_offset();
    _impl_.OffsetOneof_.offset_ = offset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementDecoration.offset)
}
inline ::proto::Vector2* PageElementDecoration::_internal_mutable_offset() {
  if (!_internal_has_offset()) {
    clear_OffsetOneof();
    set_has_offset();
    _impl_.OffsetOneof_.offset_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.OffsetOneof_.offset_;
}
inline ::proto::Vector2* PageElementDecoration::mutable_offset() {
  ::proto::Vector2* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:proto.PageElementDecoration.offset)
  return _msg;
}

// .proto.Vector2String offset_string = 2;
inline bool PageElementDecoration::_internal_has_offset_string() const {
  return OffsetOneof_case() == kOffsetString;
}
inline bool PageElementDecoration::has_offset_string() const {
  return _internal_has_offset_string();
}
inline void PageElementDecoration::set_has_offset_string() {
  _impl_._oneof_case_[0] = kOffsetString;
}
inline void PageElementDecoration::clear_offset_string() {
  if (_internal_has_offset_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.OffsetOneof_.offset_string_;
    }
    clear_has_OffsetOneof();
  }
}
inline ::proto::Vector2String* PageElementDecoration::release_offset_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementDecoration.offset_string)
  if (_internal_has_offset_string()) {
    clear_has_OffsetOneof();
    ::proto::Vector2String* temp = _impl_.OffsetOneof_.offset_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.OffsetOneof_.offset_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementDecoration::_internal_offset_string() const {
  return _internal_has_offset_string()
      ? *_impl_.OffsetOneof_.offset_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementDecoration::offset_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementDecoration.offset_string)
  return _internal_offset_string();
}
inline ::proto::Vector2String* PageElementDecoration::unsafe_arena_release_offset_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementDecoration.offset_string)
  if (_internal_has_offset_string()) {
    clear_has_OffsetOneof();
    ::proto::Vector2String* temp = _impl_.OffsetOneof_.offset_string_;
    _impl_.OffsetOneof_.offset_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementDecoration::unsafe_arena_set_allocated_offset_string(::proto::Vector2String* offset_string) {
  clear_OffsetOneof();
  if (offset_string) {
    set_has_offset_string();
    _impl_.OffsetOneof_.offset_string_ = offset_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementDecoration.offset_string)
}
inline ::proto::Vector2String* PageElementDecoration::_internal_mutable_offset_string() {
  if (!_internal_has_offset_string()) {
    clear_OffsetOneof();
    set_has_offset_string();
    _impl_.OffsetOneof_.offset_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.OffsetOneof_.offset_string_;
}
inline ::proto::Vector2String* PageElementDecoration::mutable_offset_string() {
  ::proto::Vector2String* _msg = _internal_mutable_offset_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementDecoration.offset_string)
  return _msg;
}

// .proto.Vector4 color = 3;
inline bool PageElementDecoration::_internal_has_color() const {
  return ColorOneof_case() == kColor;
}
inline bool PageElementDecoration::has_color() const {
  return _internal_has_color();
}
inline void PageElementDecoration::set_has_color() {
  _impl_._oneof_case_[1] = kColor;
}
inline ::proto::Vector4* PageElementDecoration::release_color() {
  // @@protoc_insertion_point(field_release:proto.PageElementDecoration.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector4& PageElementDecoration::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.ColorOneof_.color_
      : reinterpret_cast< ::proto::Vector4&>(::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& PageElementDecoration::color() const {
  // @@protoc_insertion_point(field_get:proto.PageElementDecoration.color)
  return _internal_color();
}
inline ::proto::Vector4* PageElementDecoration::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementDecoration.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementDecoration::unsafe_arena_set_allocated_color(::proto::Vector4* color) {
  clear_ColorOneof();
  if (color) {
    set_has_color();
    _impl_.ColorOneof_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementDecoration.color)
}
inline ::proto::Vector4* PageElementDecoration::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_ColorOneof();
    set_has_color();
    _impl_.ColorOneof_.color_ = CreateMaybeMessage< ::proto::Vector4 >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_;
}
inline ::proto::Vector4* PageElementDecoration::mutable_color() {
  ::proto::Vector4* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.PageElementDecoration.color)
  return _msg;
}

// .proto.ColorString color_string = 4;
inline bool PageElementDecoration::_internal_has_color_string() const {
  return ColorOneof_case() == kColorString;
}
inline bool PageElementDecoration::has_color_string() const {
  return _internal_has_color_string();
}
inline void PageElementDecoration::set_has_color_string() {
  _impl_._oneof_case_[1] = kColorString;
}
inline void PageElementDecoration::clear_color_string() {
  if (_internal_has_color_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ColorOneof_.color_string_;
    }
    clear_has_ColorOneof();
  }
}
inline ::proto::ColorString* PageElementDecoration::release_color_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementDecoration.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ColorString& PageElementDecoration::_internal_color_string() const {
  return _internal_has_color_string()
      ? *_impl_.ColorOneof_.color_string_
      : reinterpret_cast< ::proto::ColorString&>(::proto::_ColorString_default_instance_);
}
inline const ::proto::ColorString& PageElementDecoration::color_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementDecoration.color_string)
  return _internal_color_string();
}
inline ::proto::ColorString* PageElementDecoration::unsafe_arena_release_color_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementDecoration.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementDecoration::unsafe_arena_set_allocated_color_string(::proto::ColorString* color_string) {
  clear_ColorOneof();
  if (color_string) {
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = color_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementDecoration.color_string)
}
inline ::proto::ColorString* PageElementDecoration::_internal_mutable_color_string() {
  if (!_internal_has_color_string()) {
    clear_ColorOneof();
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = CreateMaybeMessage< ::proto::ColorString >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_string_;
}
inline ::proto::ColorString* PageElementDecoration::mutable_color_string() {
  ::proto::ColorString* _msg = _internal_mutable_color_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementDecoration.color_string)
  return _msg;
}

// .proto.DecorationEnum decoration_enum = 5;
inline void PageElementDecoration::clear_decoration_enum() {
  _impl_.decoration_enum_ = 0;
}
inline ::proto::DecorationEnum PageElementDecoration::_internal_decoration_enum() const {
  return static_cast< ::proto::DecorationEnum >(_impl_.decoration_enum_);
}
inline ::proto::DecorationEnum PageElementDecoration::decoration_enum() const {
  // @@protoc_insertion_point(field_get:proto.PageElementDecoration.decoration_enum)
  return _internal_decoration_enum();
}
inline void PageElementDecoration::_internal_set_decoration_enum(::proto::DecorationEnum value) {
  
  _impl_.decoration_enum_ = value;
}
inline void PageElementDecoration::set_decoration_enum(::proto::DecorationEnum value) {
  _internal_set_decoration_enum(value);
  // @@protoc_insertion_point(field_set:proto.PageElementDecoration.decoration_enum)
}

inline bool PageElementDecoration::has_OffsetOneof() const {
  return OffsetOneof_case() != OFFSETONEOF_NOT_SET;
}
inline void PageElementDecoration::clear_has_OffsetOneof() {
  _impl_._oneof_case_[0] = OFFSETONEOF_NOT_SET;
}
inline bool PageElementDecoration::has_ColorOneof() const {
  return ColorOneof_case() != COLORONEOF_NOT_SET;
}
inline void PageElementDecoration::clear_has_ColorOneof() {
  _impl_._oneof_case_[1] = COLORONEOF_NOT_SET;
}
inline PageElementDecoration::OffsetOneofCase PageElementDecoration::OffsetOneof_case() const {
  return PageElementDecoration::OffsetOneofCase(_impl_._oneof_case_[0]);
}
inline PageElementDecoration::ColorOneofCase PageElementDecoration::ColorOneof_case() const {
  return PageElementDecoration::ColorOneofCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// PageElementText

// string text = 1;
inline void PageElementText::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& PageElementText::text() const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageElementText::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PageElementText.text)
}
inline std::string* PageElementText::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:proto.PageElementText.text)
  return _s;
}
inline const std::string& PageElementText::_internal_text() const {
  return _impl_.text_.Get();
}
inline void PageElementText::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* PageElementText::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* PageElementText::release_text() {
  // @@protoc_insertion_point(field_release:proto.PageElementText.text)
  return _impl_.text_.Release();
}
inline void PageElementText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PageElementText.text)
}

// .proto.Vector4 color = 2;
inline bool PageElementText::_internal_has_color() const {
  return ColorOneof_case() == kColor;
}
inline bool PageElementText::has_color() const {
  return _internal_has_color();
}
inline void PageElementText::set_has_color() {
  _impl_._oneof_case_[0] = kColor;
}
inline ::proto::Vector4* PageElementText::release_color() {
  // @@protoc_insertion_point(field_release:proto.PageElementText.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector4& PageElementText::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.ColorOneof_.color_
      : reinterpret_cast< ::proto::Vector4&>(::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& PageElementText::color() const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.color)
  return _internal_color();
}
inline ::proto::Vector4* PageElementText::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementText.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementText::unsafe_arena_set_allocated_color(::proto::Vector4* color) {
  clear_ColorOneof();
  if (color) {
    set_has_color();
    _impl_.ColorOneof_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementText.color)
}
inline ::proto::Vector4* PageElementText::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_ColorOneof();
    set_has_color();
    _impl_.ColorOneof_.color_ = CreateMaybeMessage< ::proto::Vector4 >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_;
}
inline ::proto::Vector4* PageElementText::mutable_color() {
  ::proto::Vector4* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.PageElementText.color)
  return _msg;
}

// .proto.ColorString color_string = 3;
inline bool PageElementText::_internal_has_color_string() const {
  return ColorOneof_case() == kColorString;
}
inline bool PageElementText::has_color_string() const {
  return _internal_has_color_string();
}
inline void PageElementText::set_has_color_string() {
  _impl_._oneof_case_[0] = kColorString;
}
inline void PageElementText::clear_color_string() {
  if (_internal_has_color_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ColorOneof_.color_string_;
    }
    clear_has_ColorOneof();
  }
}
inline ::proto::ColorString* PageElementText::release_color_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementText.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ColorString& PageElementText::_internal_color_string() const {
  return _internal_has_color_string()
      ? *_impl_.ColorOneof_.color_string_
      : reinterpret_cast< ::proto::ColorString&>(::proto::_ColorString_default_instance_);
}
inline const ::proto::ColorString& PageElementText::color_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.color_string)
  return _internal_color_string();
}
inline ::proto::ColorString* PageElementText::unsafe_arena_release_color_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementText.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementText::unsafe_arena_set_allocated_color_string(::proto::ColorString* color_string) {
  clear_ColorOneof();
  if (color_string) {
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = color_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementText.color_string)
}
inline ::proto::ColorString* PageElementText::_internal_mutable_color_string() {
  if (!_internal_has_color_string()) {
    clear_ColorOneof();
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = CreateMaybeMessage< ::proto::ColorString >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_string_;
}
inline ::proto::ColorString* PageElementText::mutable_color_string() {
  ::proto::ColorString* _msg = _internal_mutable_color_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementText.color_string)
  return _msg;
}

// .proto.Vector2 position = 4;
inline bool PageElementText::_internal_has_position() const {
  return PositionOneof_case() == kPosition;
}
inline bool PageElementText::has_position() const {
  return _internal_has_position();
}
inline void PageElementText::set_has_position() {
  _impl_._oneof_case_[1] = kPosition;
}
inline ::proto::Vector2* PageElementText::release_position() {
  // @@protoc_insertion_point(field_release:proto.PageElementText.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementText::_internal_position() const {
  return _internal_has_position()
      ? *_impl_.PositionOneof_.position_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementText::position() const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.position)
  return _internal_position();
}
inline ::proto::Vector2* PageElementText::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementText.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementText::unsafe_arena_set_allocated_position(::proto::Vector2* position) {
  clear_PositionOneof();
  if (position) {
    set_has_position();
    _impl_.PositionOneof_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementText.position)
}
inline ::proto::Vector2* PageElementText::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_PositionOneof();
    set_has_position();
    _impl_.PositionOneof_.position_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_;
}
inline ::proto::Vector2* PageElementText::mutable_position() {
  ::proto::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.PageElementText.position)
  return _msg;
}

// .proto.Vector2String position_string = 5;
inline bool PageElementText::_internal_has_position_string() const {
  return PositionOneof_case() == kPositionString;
}
inline bool PageElementText::has_position_string() const {
  return _internal_has_position_string();
}
inline void PageElementText::set_has_position_string() {
  _impl_._oneof_case_[1] = kPositionString;
}
inline void PageElementText::clear_position_string() {
  if (_internal_has_position_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PositionOneof_.position_string_;
    }
    clear_has_PositionOneof();
  }
}
inline ::proto::Vector2String* PageElementText::release_position_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementText.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementText::_internal_position_string() const {
  return _internal_has_position_string()
      ? *_impl_.PositionOneof_.position_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementText::position_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.position_string)
  return _internal_position_string();
}
inline ::proto::Vector2String* PageElementText::unsafe_arena_release_position_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementText.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementText::unsafe_arena_set_allocated_position_string(::proto::Vector2String* position_string) {
  clear_PositionOneof();
  if (position_string) {
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = position_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementText.position_string)
}
inline ::proto::Vector2String* PageElementText::_internal_mutable_position_string() {
  if (!_internal_has_position_string()) {
    clear_PositionOneof();
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_string_;
}
inline ::proto::Vector2String* PageElementText::mutable_position_string() {
  ::proto::Vector2String* _msg = _internal_mutable_position_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementText.position_string)
  return _msg;
}

// .proto.TextSizeEnum text_size_enum = 6;
inline void PageElementText::clear_text_size_enum() {
  _impl_.text_size_enum_ = 0;
}
inline ::proto::TextSizeEnum PageElementText::_internal_text_size_enum() const {
  return static_cast< ::proto::TextSizeEnum >(_impl_.text_size_enum_);
}
inline ::proto::TextSizeEnum PageElementText::text_size_enum() const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.text_size_enum)
  return _internal_text_size_enum();
}
inline void PageElementText::_internal_set_text_size_enum(::proto::TextSizeEnum value) {
  
  _impl_.text_size_enum_ = value;
}
inline void PageElementText::set_text_size_enum(::proto::TextSizeEnum value) {
  _internal_set_text_size_enum(value);
  // @@protoc_insertion_point(field_set:proto.PageElementText.text_size_enum)
}

// .proto.AlignmentEnum alignment_enum = 7;
inline void PageElementText::clear_alignment_enum() {
  _impl_.alignment_enum_ = 0;
}
inline ::proto::AlignmentEnum PageElementText::_internal_alignment_enum() const {
  return static_cast< ::proto::AlignmentEnum >(_impl_.alignment_enum_);
}
inline ::proto::AlignmentEnum PageElementText::alignment_enum() const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.alignment_enum)
  return _internal_alignment_enum();
}
inline void PageElementText::_internal_set_alignment_enum(::proto::AlignmentEnum value) {
  
  _impl_.alignment_enum_ = value;
}
inline void PageElementText::set_alignment_enum(::proto::AlignmentEnum value) {
  _internal_set_alignment_enum(value);
  // @@protoc_insertion_point(field_set:proto.PageElementText.alignment_enum)
}

// repeated .proto.PageElementDecoration decorations = 8;
inline int PageElementText::_internal_decorations_size() const {
  return _impl_.decorations_.size();
}
inline int PageElementText::decorations_size() const {
  return _internal_decorations_size();
}
inline void PageElementText::clear_decorations() {
  _impl_.decorations_.Clear();
}
inline ::proto::PageElementDecoration* PageElementText::mutable_decorations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PageElementText.decorations)
  return _impl_.decorations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElementDecoration >*
PageElementText::mutable_decorations() {
  // @@protoc_insertion_point(field_mutable_list:proto.PageElementText.decorations)
  return &_impl_.decorations_;
}
inline const ::proto::PageElementDecoration& PageElementText::_internal_decorations(int index) const {
  return _impl_.decorations_.Get(index);
}
inline const ::proto::PageElementDecoration& PageElementText::decorations(int index) const {
  // @@protoc_insertion_point(field_get:proto.PageElementText.decorations)
  return _internal_decorations(index);
}
inline ::proto::PageElementDecoration* PageElementText::_internal_add_decorations() {
  return _impl_.decorations_.Add();
}
inline ::proto::PageElementDecoration* PageElementText::add_decorations() {
  ::proto::PageElementDecoration* _add = _internal_add_decorations();
  // @@protoc_insertion_point(field_add:proto.PageElementText.decorations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElementDecoration >&
PageElementText::decorations() const {
  // @@protoc_insertion_point(field_list:proto.PageElementText.decorations)
  return _impl_.decorations_;
}

inline bool PageElementText::has_ColorOneof() const {
  return ColorOneof_case() != COLORONEOF_NOT_SET;
}
inline void PageElementText::clear_has_ColorOneof() {
  _impl_._oneof_case_[0] = COLORONEOF_NOT_SET;
}
inline bool PageElementText::has_PositionOneof() const {
  return PositionOneof_case() != POSITIONONEOF_NOT_SET;
}
inline void PageElementText::clear_has_PositionOneof() {
  _impl_._oneof_case_[1] = POSITIONONEOF_NOT_SET;
}
inline PageElementText::ColorOneofCase PageElementText::ColorOneof_case() const {
  return PageElementText::ColorOneofCase(_impl_._oneof_case_[0]);
}
inline PageElementText::PositionOneofCase PageElementText::PositionOneof_case() const {
  return PageElementText::PositionOneofCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// PageElementImage

// string image = 1;
inline void PageElementImage::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& PageElementImage::image() const {
  // @@protoc_insertion_point(field_get:proto.PageElementImage.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageElementImage::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PageElementImage.image)
}
inline std::string* PageElementImage::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:proto.PageElementImage.image)
  return _s;
}
inline const std::string& PageElementImage::_internal_image() const {
  return _impl_.image_.Get();
}
inline void PageElementImage::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* PageElementImage::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* PageElementImage::release_image() {
  // @@protoc_insertion_point(field_release:proto.PageElementImage.image)
  return _impl_.image_.Release();
}
inline void PageElementImage::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PageElementImage.image)
}

// .proto.Vector2 position = 2;
inline bool PageElementImage::_internal_has_position() const {
  return PositionOneof_case() == kPosition;
}
inline bool PageElementImage::has_position() const {
  return _internal_has_position();
}
inline void PageElementImage::set_has_position() {
  _impl_._oneof_case_[0] = kPosition;
}
inline ::proto::Vector2* PageElementImage::release_position() {
  // @@protoc_insertion_point(field_release:proto.PageElementImage.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementImage::_internal_position() const {
  return _internal_has_position()
      ? *_impl_.PositionOneof_.position_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementImage::position() const {
  // @@protoc_insertion_point(field_get:proto.PageElementImage.position)
  return _internal_position();
}
inline ::proto::Vector2* PageElementImage::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementImage.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementImage::unsafe_arena_set_allocated_position(::proto::Vector2* position) {
  clear_PositionOneof();
  if (position) {
    set_has_position();
    _impl_.PositionOneof_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementImage.position)
}
inline ::proto::Vector2* PageElementImage::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_PositionOneof();
    set_has_position();
    _impl_.PositionOneof_.position_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_;
}
inline ::proto::Vector2* PageElementImage::mutable_position() {
  ::proto::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.PageElementImage.position)
  return _msg;
}

// .proto.Vector2String position_string = 3;
inline bool PageElementImage::_internal_has_position_string() const {
  return PositionOneof_case() == kPositionString;
}
inline bool PageElementImage::has_position_string() const {
  return _internal_has_position_string();
}
inline void PageElementImage::set_has_position_string() {
  _impl_._oneof_case_[0] = kPositionString;
}
inline void PageElementImage::clear_position_string() {
  if (_internal_has_position_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PositionOneof_.position_string_;
    }
    clear_has_PositionOneof();
  }
}
inline ::proto::Vector2String* PageElementImage::release_position_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementImage.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementImage::_internal_position_string() const {
  return _internal_has_position_string()
      ? *_impl_.PositionOneof_.position_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementImage::position_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementImage.position_string)
  return _internal_position_string();
}
inline ::proto::Vector2String* PageElementImage::unsafe_arena_release_position_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementImage.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementImage::unsafe_arena_set_allocated_position_string(::proto::Vector2String* position_string) {
  clear_PositionOneof();
  if (position_string) {
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = position_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementImage.position_string)
}
inline ::proto::Vector2String* PageElementImage::_internal_mutable_position_string() {
  if (!_internal_has_position_string()) {
    clear_PositionOneof();
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_string_;
}
inline ::proto::Vector2String* PageElementImage::mutable_position_string() {
  ::proto::Vector2String* _msg = _internal_mutable_position_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementImage.position_string)
  return _msg;
}

// .proto.Vector2 size = 4;
inline bool PageElementImage::_internal_has_size() const {
  return SizeOneof_case() == kSize;
}
inline bool PageElementImage::has_size() const {
  return _internal_has_size();
}
inline void PageElementImage::set_has_size() {
  _impl_._oneof_case_[1] = kSize;
}
inline ::proto::Vector2* PageElementImage::release_size() {
  // @@protoc_insertion_point(field_release:proto.PageElementImage.size)
  if (_internal_has_size()) {
    clear_has_SizeOneof();
    ::proto::Vector2* temp = _impl_.SizeOneof_.size_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SizeOneof_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementImage::_internal_size() const {
  return _internal_has_size()
      ? *_impl_.SizeOneof_.size_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementImage::size() const {
  // @@protoc_insertion_point(field_get:proto.PageElementImage.size)
  return _internal_size();
}
inline ::proto::Vector2* PageElementImage::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementImage.size)
  if (_internal_has_size()) {
    clear_has_SizeOneof();
    ::proto::Vector2* temp = _impl_.SizeOneof_.size_;
    _impl_.SizeOneof_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementImage::unsafe_arena_set_allocated_size(::proto::Vector2* size) {
  clear_SizeOneof();
  if (size) {
    set_has_size();
    _impl_.SizeOneof_.size_ = size;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementImage.size)
}
inline ::proto::Vector2* PageElementImage::_internal_mutable_size() {
  if (!_internal_has_size()) {
    clear_SizeOneof();
    set_has_size();
    _impl_.SizeOneof_.size_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.SizeOneof_.size_;
}
inline ::proto::Vector2* PageElementImage::mutable_size() {
  ::proto::Vector2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:proto.PageElementImage.size)
  return _msg;
}

// .proto.Vector2String size_string = 5;
inline bool PageElementImage::_internal_has_size_string() const {
  return SizeOneof_case() == kSizeString;
}
inline bool PageElementImage::has_size_string() const {
  return _internal_has_size_string();
}
inline void PageElementImage::set_has_size_string() {
  _impl_._oneof_case_[1] = kSizeString;
}
inline void PageElementImage::clear_size_string() {
  if (_internal_has_size_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SizeOneof_.size_string_;
    }
    clear_has_SizeOneof();
  }
}
inline ::proto::Vector2String* PageElementImage::release_size_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementImage.size_string)
  if (_internal_has_size_string()) {
    clear_has_SizeOneof();
    ::proto::Vector2String* temp = _impl_.SizeOneof_.size_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SizeOneof_.size_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementImage::_internal_size_string() const {
  return _internal_has_size_string()
      ? *_impl_.SizeOneof_.size_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementImage::size_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementImage.size_string)
  return _internal_size_string();
}
inline ::proto::Vector2String* PageElementImage::unsafe_arena_release_size_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementImage.size_string)
  if (_internal_has_size_string()) {
    clear_has_SizeOneof();
    ::proto::Vector2String* temp = _impl_.SizeOneof_.size_string_;
    _impl_.SizeOneof_.size_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementImage::unsafe_arena_set_allocated_size_string(::proto::Vector2String* size_string) {
  clear_SizeOneof();
  if (size_string) {
    set_has_size_string();
    _impl_.SizeOneof_.size_string_ = size_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementImage.size_string)
}
inline ::proto::Vector2String* PageElementImage::_internal_mutable_size_string() {
  if (!_internal_has_size_string()) {
    clear_SizeOneof();
    set_has_size_string();
    _impl_.SizeOneof_.size_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.SizeOneof_.size_string_;
}
inline ::proto::Vector2String* PageElementImage::mutable_size_string() {
  ::proto::Vector2String* _msg = _internal_mutable_size_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementImage.size_string)
  return _msg;
}

// .proto.AlignmentEnum alignment_enum = 6;
inline void PageElementImage::clear_alignment_enum() {
  _impl_.alignment_enum_ = 0;
}
inline ::proto::AlignmentEnum PageElementImage::_internal_alignment_enum() const {
  return static_cast< ::proto::AlignmentEnum >(_impl_.alignment_enum_);
}
inline ::proto::AlignmentEnum PageElementImage::alignment_enum() const {
  // @@protoc_insertion_point(field_get:proto.PageElementImage.alignment_enum)
  return _internal_alignment_enum();
}
inline void PageElementImage::_internal_set_alignment_enum(::proto::AlignmentEnum value) {
  
  _impl_.alignment_enum_ = value;
}
inline void PageElementImage::set_alignment_enum(::proto::AlignmentEnum value) {
  _internal_set_alignment_enum(value);
  // @@protoc_insertion_point(field_set:proto.PageElementImage.alignment_enum)
}

inline bool PageElementImage::has_PositionOneof() const {
  return PositionOneof_case() != POSITIONONEOF_NOT_SET;
}
inline void PageElementImage::clear_has_PositionOneof() {
  _impl_._oneof_case_[0] = POSITIONONEOF_NOT_SET;
}
inline bool PageElementImage::has_SizeOneof() const {
  return SizeOneof_case() != SIZEONEOF_NOT_SET;
}
inline void PageElementImage::clear_has_SizeOneof() {
  _impl_._oneof_case_[1] = SIZEONEOF_NOT_SET;
}
inline PageElementImage::PositionOneofCase PageElementImage::PositionOneof_case() const {
  return PageElementImage::PositionOneofCase(_impl_._oneof_case_[0]);
}
inline PageElementImage::SizeOneofCase PageElementImage::SizeOneof_case() const {
  return PageElementImage::SizeOneofCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// PageElementLine

// .proto.Vector2 start = 1;
inline bool PageElementLine::_internal_has_start() const {
  return StartOneof_case() == kStart;
}
inline bool PageElementLine::has_start() const {
  return _internal_has_start();
}
inline void PageElementLine::set_has_start() {
  _impl_._oneof_case_[0] = kStart;
}
inline ::proto::Vector2* PageElementLine::release_start() {
  // @@protoc_insertion_point(field_release:proto.PageElementLine.start)
  if (_internal_has_start()) {
    clear_has_StartOneof();
    ::proto::Vector2* temp = _impl_.StartOneof_.start_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.StartOneof_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementLine::_internal_start() const {
  return _internal_has_start()
      ? *_impl_.StartOneof_.start_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementLine::start() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.start)
  return _internal_start();
}
inline ::proto::Vector2* PageElementLine::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementLine.start)
  if (_internal_has_start()) {
    clear_has_StartOneof();
    ::proto::Vector2* temp = _impl_.StartOneof_.start_;
    _impl_.StartOneof_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementLine::unsafe_arena_set_allocated_start(::proto::Vector2* start) {
  clear_StartOneof();
  if (start) {
    set_has_start();
    _impl_.StartOneof_.start_ = start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementLine.start)
}
inline ::proto::Vector2* PageElementLine::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_StartOneof();
    set_has_start();
    _impl_.StartOneof_.start_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.StartOneof_.start_;
}
inline ::proto::Vector2* PageElementLine::mutable_start() {
  ::proto::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:proto.PageElementLine.start)
  return _msg;
}

// .proto.Vector2String start_string = 2;
inline bool PageElementLine::_internal_has_start_string() const {
  return StartOneof_case() == kStartString;
}
inline bool PageElementLine::has_start_string() const {
  return _internal_has_start_string();
}
inline void PageElementLine::set_has_start_string() {
  _impl_._oneof_case_[0] = kStartString;
}
inline void PageElementLine::clear_start_string() {
  if (_internal_has_start_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.StartOneof_.start_string_;
    }
    clear_has_StartOneof();
  }
}
inline ::proto::Vector2String* PageElementLine::release_start_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementLine.start_string)
  if (_internal_has_start_string()) {
    clear_has_StartOneof();
    ::proto::Vector2String* temp = _impl_.StartOneof_.start_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.StartOneof_.start_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementLine::_internal_start_string() const {
  return _internal_has_start_string()
      ? *_impl_.StartOneof_.start_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementLine::start_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.start_string)
  return _internal_start_string();
}
inline ::proto::Vector2String* PageElementLine::unsafe_arena_release_start_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementLine.start_string)
  if (_internal_has_start_string()) {
    clear_has_StartOneof();
    ::proto::Vector2String* temp = _impl_.StartOneof_.start_string_;
    _impl_.StartOneof_.start_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementLine::unsafe_arena_set_allocated_start_string(::proto::Vector2String* start_string) {
  clear_StartOneof();
  if (start_string) {
    set_has_start_string();
    _impl_.StartOneof_.start_string_ = start_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementLine.start_string)
}
inline ::proto::Vector2String* PageElementLine::_internal_mutable_start_string() {
  if (!_internal_has_start_string()) {
    clear_StartOneof();
    set_has_start_string();
    _impl_.StartOneof_.start_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.StartOneof_.start_string_;
}
inline ::proto::Vector2String* PageElementLine::mutable_start_string() {
  ::proto::Vector2String* _msg = _internal_mutable_start_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementLine.start_string)
  return _msg;
}

// .proto.Vector2 end = 3;
inline bool PageElementLine::_internal_has_end() const {
  return EndOneof_case() == kEnd;
}
inline bool PageElementLine::has_end() const {
  return _internal_has_end();
}
inline void PageElementLine::set_has_end() {
  _impl_._oneof_case_[1] = kEnd;
}
inline ::proto::Vector2* PageElementLine::release_end() {
  // @@protoc_insertion_point(field_release:proto.PageElementLine.end)
  if (_internal_has_end()) {
    clear_has_EndOneof();
    ::proto::Vector2* temp = _impl_.EndOneof_.end_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.EndOneof_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementLine::_internal_end() const {
  return _internal_has_end()
      ? *_impl_.EndOneof_.end_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementLine::end() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.end)
  return _internal_end();
}
inline ::proto::Vector2* PageElementLine::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementLine.end)
  if (_internal_has_end()) {
    clear_has_EndOneof();
    ::proto::Vector2* temp = _impl_.EndOneof_.end_;
    _impl_.EndOneof_.end_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementLine::unsafe_arena_set_allocated_end(::proto::Vector2* end) {
  clear_EndOneof();
  if (end) {
    set_has_end();
    _impl_.EndOneof_.end_ = end;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementLine.end)
}
inline ::proto::Vector2* PageElementLine::_internal_mutable_end() {
  if (!_internal_has_end()) {
    clear_EndOneof();
    set_has_end();
    _impl_.EndOneof_.end_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.EndOneof_.end_;
}
inline ::proto::Vector2* PageElementLine::mutable_end() {
  ::proto::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:proto.PageElementLine.end)
  return _msg;
}

// .proto.Vector2String end_string = 4;
inline bool PageElementLine::_internal_has_end_string() const {
  return EndOneof_case() == kEndString;
}
inline bool PageElementLine::has_end_string() const {
  return _internal_has_end_string();
}
inline void PageElementLine::set_has_end_string() {
  _impl_._oneof_case_[1] = kEndString;
}
inline void PageElementLine::clear_end_string() {
  if (_internal_has_end_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.EndOneof_.end_string_;
    }
    clear_has_EndOneof();
  }
}
inline ::proto::Vector2String* PageElementLine::release_end_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementLine.end_string)
  if (_internal_has_end_string()) {
    clear_has_EndOneof();
    ::proto::Vector2String* temp = _impl_.EndOneof_.end_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.EndOneof_.end_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementLine::_internal_end_string() const {
  return _internal_has_end_string()
      ? *_impl_.EndOneof_.end_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementLine::end_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.end_string)
  return _internal_end_string();
}
inline ::proto::Vector2String* PageElementLine::unsafe_arena_release_end_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementLine.end_string)
  if (_internal_has_end_string()) {
    clear_has_EndOneof();
    ::proto::Vector2String* temp = _impl_.EndOneof_.end_string_;
    _impl_.EndOneof_.end_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementLine::unsafe_arena_set_allocated_end_string(::proto::Vector2String* end_string) {
  clear_EndOneof();
  if (end_string) {
    set_has_end_string();
    _impl_.EndOneof_.end_string_ = end_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementLine.end_string)
}
inline ::proto::Vector2String* PageElementLine::_internal_mutable_end_string() {
  if (!_internal_has_end_string()) {
    clear_EndOneof();
    set_has_end_string();
    _impl_.EndOneof_.end_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.EndOneof_.end_string_;
}
inline ::proto::Vector2String* PageElementLine::mutable_end_string() {
  ::proto::Vector2String* _msg = _internal_mutable_end_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementLine.end_string)
  return _msg;
}

// .proto.Vector4 color = 5;
inline bool PageElementLine::_internal_has_color() const {
  return ColorOneof_case() == kColor;
}
inline bool PageElementLine::has_color() const {
  return _internal_has_color();
}
inline void PageElementLine::set_has_color() {
  _impl_._oneof_case_[2] = kColor;
}
inline ::proto::Vector4* PageElementLine::release_color() {
  // @@protoc_insertion_point(field_release:proto.PageElementLine.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector4& PageElementLine::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.ColorOneof_.color_
      : reinterpret_cast< ::proto::Vector4&>(::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& PageElementLine::color() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.color)
  return _internal_color();
}
inline ::proto::Vector4* PageElementLine::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementLine.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementLine::unsafe_arena_set_allocated_color(::proto::Vector4* color) {
  clear_ColorOneof();
  if (color) {
    set_has_color();
    _impl_.ColorOneof_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementLine.color)
}
inline ::proto::Vector4* PageElementLine::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_ColorOneof();
    set_has_color();
    _impl_.ColorOneof_.color_ = CreateMaybeMessage< ::proto::Vector4 >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_;
}
inline ::proto::Vector4* PageElementLine::mutable_color() {
  ::proto::Vector4* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.PageElementLine.color)
  return _msg;
}

// .proto.ColorString color_string = 6;
inline bool PageElementLine::_internal_has_color_string() const {
  return ColorOneof_case() == kColorString;
}
inline bool PageElementLine::has_color_string() const {
  return _internal_has_color_string();
}
inline void PageElementLine::set_has_color_string() {
  _impl_._oneof_case_[2] = kColorString;
}
inline void PageElementLine::clear_color_string() {
  if (_internal_has_color_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ColorOneof_.color_string_;
    }
    clear_has_ColorOneof();
  }
}
inline ::proto::ColorString* PageElementLine::release_color_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementLine.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ColorString& PageElementLine::_internal_color_string() const {
  return _internal_has_color_string()
      ? *_impl_.ColorOneof_.color_string_
      : reinterpret_cast< ::proto::ColorString&>(::proto::_ColorString_default_instance_);
}
inline const ::proto::ColorString& PageElementLine::color_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.color_string)
  return _internal_color_string();
}
inline ::proto::ColorString* PageElementLine::unsafe_arena_release_color_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementLine.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementLine::unsafe_arena_set_allocated_color_string(::proto::ColorString* color_string) {
  clear_ColorOneof();
  if (color_string) {
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = color_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementLine.color_string)
}
inline ::proto::ColorString* PageElementLine::_internal_mutable_color_string() {
  if (!_internal_has_color_string()) {
    clear_ColorOneof();
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = CreateMaybeMessage< ::proto::ColorString >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_string_;
}
inline ::proto::ColorString* PageElementLine::mutable_color_string() {
  ::proto::ColorString* _msg = _internal_mutable_color_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementLine.color_string)
  return _msg;
}

// double thickness = 7;
inline void PageElementLine::clear_thickness() {
  _impl_.thickness_ = 0;
}
inline double PageElementLine::_internal_thickness() const {
  return _impl_.thickness_;
}
inline double PageElementLine::thickness() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.thickness)
  return _internal_thickness();
}
inline void PageElementLine::_internal_set_thickness(double value) {
  
  _impl_.thickness_ = value;
}
inline void PageElementLine::set_thickness(double value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:proto.PageElementLine.thickness)
}

// .proto.AlignmentEnum alignment_enum = 8;
inline void PageElementLine::clear_alignment_enum() {
  _impl_.alignment_enum_ = 0;
}
inline ::proto::AlignmentEnum PageElementLine::_internal_alignment_enum() const {
  return static_cast< ::proto::AlignmentEnum >(_impl_.alignment_enum_);
}
inline ::proto::AlignmentEnum PageElementLine::alignment_enum() const {
  // @@protoc_insertion_point(field_get:proto.PageElementLine.alignment_enum)
  return _internal_alignment_enum();
}
inline void PageElementLine::_internal_set_alignment_enum(::proto::AlignmentEnum value) {
  
  _impl_.alignment_enum_ = value;
}
inline void PageElementLine::set_alignment_enum(::proto::AlignmentEnum value) {
  _internal_set_alignment_enum(value);
  // @@protoc_insertion_point(field_set:proto.PageElementLine.alignment_enum)
}

inline bool PageElementLine::has_StartOneof() const {
  return StartOneof_case() != STARTONEOF_NOT_SET;
}
inline void PageElementLine::clear_has_StartOneof() {
  _impl_._oneof_case_[0] = STARTONEOF_NOT_SET;
}
inline bool PageElementLine::has_EndOneof() const {
  return EndOneof_case() != ENDONEOF_NOT_SET;
}
inline void PageElementLine::clear_has_EndOneof() {
  _impl_._oneof_case_[1] = ENDONEOF_NOT_SET;
}
inline bool PageElementLine::has_ColorOneof() const {
  return ColorOneof_case() != COLORONEOF_NOT_SET;
}
inline void PageElementLine::clear_has_ColorOneof() {
  _impl_._oneof_case_[2] = COLORONEOF_NOT_SET;
}
inline PageElementLine::StartOneofCase PageElementLine::StartOneof_case() const {
  return PageElementLine::StartOneofCase(_impl_._oneof_case_[0]);
}
inline PageElementLine::EndOneofCase PageElementLine::EndOneof_case() const {
  return PageElementLine::EndOneofCase(_impl_._oneof_case_[1]);
}
inline PageElementLine::ColorOneofCase PageElementLine::ColorOneof_case() const {
  return PageElementLine::ColorOneofCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// PageElementRectFilled

// .proto.Vector2 position = 1;
inline bool PageElementRectFilled::_internal_has_position() const {
  return PositionOneof_case() == kPosition;
}
inline bool PageElementRectFilled::has_position() const {
  return _internal_has_position();
}
inline void PageElementRectFilled::set_has_position() {
  _impl_._oneof_case_[0] = kPosition;
}
inline ::proto::Vector2* PageElementRectFilled::release_position() {
  // @@protoc_insertion_point(field_release:proto.PageElementRectFilled.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementRectFilled::_internal_position() const {
  return _internal_has_position()
      ? *_impl_.PositionOneof_.position_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementRectFilled::position() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.position)
  return _internal_position();
}
inline ::proto::Vector2* PageElementRectFilled::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementRectFilled.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementRectFilled::unsafe_arena_set_allocated_position(::proto::Vector2* position) {
  clear_PositionOneof();
  if (position) {
    set_has_position();
    _impl_.PositionOneof_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementRectFilled.position)
}
inline ::proto::Vector2* PageElementRectFilled::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_PositionOneof();
    set_has_position();
    _impl_.PositionOneof_.position_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_;
}
inline ::proto::Vector2* PageElementRectFilled::mutable_position() {
  ::proto::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.PageElementRectFilled.position)
  return _msg;
}

// .proto.Vector2String position_string = 2;
inline bool PageElementRectFilled::_internal_has_position_string() const {
  return PositionOneof_case() == kPositionString;
}
inline bool PageElementRectFilled::has_position_string() const {
  return _internal_has_position_string();
}
inline void PageElementRectFilled::set_has_position_string() {
  _impl_._oneof_case_[0] = kPositionString;
}
inline void PageElementRectFilled::clear_position_string() {
  if (_internal_has_position_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PositionOneof_.position_string_;
    }
    clear_has_PositionOneof();
  }
}
inline ::proto::Vector2String* PageElementRectFilled::release_position_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementRectFilled.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementRectFilled::_internal_position_string() const {
  return _internal_has_position_string()
      ? *_impl_.PositionOneof_.position_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementRectFilled::position_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.position_string)
  return _internal_position_string();
}
inline ::proto::Vector2String* PageElementRectFilled::unsafe_arena_release_position_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementRectFilled.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementRectFilled::unsafe_arena_set_allocated_position_string(::proto::Vector2String* position_string) {
  clear_PositionOneof();
  if (position_string) {
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = position_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementRectFilled.position_string)
}
inline ::proto::Vector2String* PageElementRectFilled::_internal_mutable_position_string() {
  if (!_internal_has_position_string()) {
    clear_PositionOneof();
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_string_;
}
inline ::proto::Vector2String* PageElementRectFilled::mutable_position_string() {
  ::proto::Vector2String* _msg = _internal_mutable_position_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementRectFilled.position_string)
  return _msg;
}

// .proto.Vector2 size = 3;
inline bool PageElementRectFilled::_internal_has_size() const {
  return SizeOneof_case() == kSize;
}
inline bool PageElementRectFilled::has_size() const {
  return _internal_has_size();
}
inline void PageElementRectFilled::set_has_size() {
  _impl_._oneof_case_[1] = kSize;
}
inline ::proto::Vector2* PageElementRectFilled::release_size() {
  // @@protoc_insertion_point(field_release:proto.PageElementRectFilled.size)
  if (_internal_has_size()) {
    clear_has_SizeOneof();
    ::proto::Vector2* temp = _impl_.SizeOneof_.size_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SizeOneof_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementRectFilled::_internal_size() const {
  return _internal_has_size()
      ? *_impl_.SizeOneof_.size_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementRectFilled::size() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.size)
  return _internal_size();
}
inline ::proto::Vector2* PageElementRectFilled::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementRectFilled.size)
  if (_internal_has_size()) {
    clear_has_SizeOneof();
    ::proto::Vector2* temp = _impl_.SizeOneof_.size_;
    _impl_.SizeOneof_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementRectFilled::unsafe_arena_set_allocated_size(::proto::Vector2* size) {
  clear_SizeOneof();
  if (size) {
    set_has_size();
    _impl_.SizeOneof_.size_ = size;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementRectFilled.size)
}
inline ::proto::Vector2* PageElementRectFilled::_internal_mutable_size() {
  if (!_internal_has_size()) {
    clear_SizeOneof();
    set_has_size();
    _impl_.SizeOneof_.size_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.SizeOneof_.size_;
}
inline ::proto::Vector2* PageElementRectFilled::mutable_size() {
  ::proto::Vector2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:proto.PageElementRectFilled.size)
  return _msg;
}

// .proto.Vector2String size_string = 4;
inline bool PageElementRectFilled::_internal_has_size_string() const {
  return SizeOneof_case() == kSizeString;
}
inline bool PageElementRectFilled::has_size_string() const {
  return _internal_has_size_string();
}
inline void PageElementRectFilled::set_has_size_string() {
  _impl_._oneof_case_[1] = kSizeString;
}
inline void PageElementRectFilled::clear_size_string() {
  if (_internal_has_size_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SizeOneof_.size_string_;
    }
    clear_has_SizeOneof();
  }
}
inline ::proto::Vector2String* PageElementRectFilled::release_size_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementRectFilled.size_string)
  if (_internal_has_size_string()) {
    clear_has_SizeOneof();
    ::proto::Vector2String* temp = _impl_.SizeOneof_.size_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SizeOneof_.size_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementRectFilled::_internal_size_string() const {
  return _internal_has_size_string()
      ? *_impl_.SizeOneof_.size_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementRectFilled::size_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.size_string)
  return _internal_size_string();
}
inline ::proto::Vector2String* PageElementRectFilled::unsafe_arena_release_size_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementRectFilled.size_string)
  if (_internal_has_size_string()) {
    clear_has_SizeOneof();
    ::proto::Vector2String* temp = _impl_.SizeOneof_.size_string_;
    _impl_.SizeOneof_.size_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementRectFilled::unsafe_arena_set_allocated_size_string(::proto::Vector2String* size_string) {
  clear_SizeOneof();
  if (size_string) {
    set_has_size_string();
    _impl_.SizeOneof_.size_string_ = size_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementRectFilled.size_string)
}
inline ::proto::Vector2String* PageElementRectFilled::_internal_mutable_size_string() {
  if (!_internal_has_size_string()) {
    clear_SizeOneof();
    set_has_size_string();
    _impl_.SizeOneof_.size_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.SizeOneof_.size_string_;
}
inline ::proto::Vector2String* PageElementRectFilled::mutable_size_string() {
  ::proto::Vector2String* _msg = _internal_mutable_size_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementRectFilled.size_string)
  return _msg;
}

// .proto.Vector4 color = 5;
inline bool PageElementRectFilled::_internal_has_color() const {
  return ColorOneof_case() == kColor;
}
inline bool PageElementRectFilled::has_color() const {
  return _internal_has_color();
}
inline void PageElementRectFilled::set_has_color() {
  _impl_._oneof_case_[2] = kColor;
}
inline ::proto::Vector4* PageElementRectFilled::release_color() {
  // @@protoc_insertion_point(field_release:proto.PageElementRectFilled.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector4& PageElementRectFilled::_internal_color() const {
  return _internal_has_color()
      ? *_impl_.ColorOneof_.color_
      : reinterpret_cast< ::proto::Vector4&>(::proto::_Vector4_default_instance_);
}
inline const ::proto::Vector4& PageElementRectFilled::color() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.color)
  return _internal_color();
}
inline ::proto::Vector4* PageElementRectFilled::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementRectFilled.color)
  if (_internal_has_color()) {
    clear_has_ColorOneof();
    ::proto::Vector4* temp = _impl_.ColorOneof_.color_;
    _impl_.ColorOneof_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementRectFilled::unsafe_arena_set_allocated_color(::proto::Vector4* color) {
  clear_ColorOneof();
  if (color) {
    set_has_color();
    _impl_.ColorOneof_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementRectFilled.color)
}
inline ::proto::Vector4* PageElementRectFilled::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_ColorOneof();
    set_has_color();
    _impl_.ColorOneof_.color_ = CreateMaybeMessage< ::proto::Vector4 >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_;
}
inline ::proto::Vector4* PageElementRectFilled::mutable_color() {
  ::proto::Vector4* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:proto.PageElementRectFilled.color)
  return _msg;
}

// .proto.ColorString color_string = 6;
inline bool PageElementRectFilled::_internal_has_color_string() const {
  return ColorOneof_case() == kColorString;
}
inline bool PageElementRectFilled::has_color_string() const {
  return _internal_has_color_string();
}
inline void PageElementRectFilled::set_has_color_string() {
  _impl_._oneof_case_[2] = kColorString;
}
inline void PageElementRectFilled::clear_color_string() {
  if (_internal_has_color_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ColorOneof_.color_string_;
    }
    clear_has_ColorOneof();
  }
}
inline ::proto::ColorString* PageElementRectFilled::release_color_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementRectFilled.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::ColorString& PageElementRectFilled::_internal_color_string() const {
  return _internal_has_color_string()
      ? *_impl_.ColorOneof_.color_string_
      : reinterpret_cast< ::proto::ColorString&>(::proto::_ColorString_default_instance_);
}
inline const ::proto::ColorString& PageElementRectFilled::color_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.color_string)
  return _internal_color_string();
}
inline ::proto::ColorString* PageElementRectFilled::unsafe_arena_release_color_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementRectFilled.color_string)
  if (_internal_has_color_string()) {
    clear_has_ColorOneof();
    ::proto::ColorString* temp = _impl_.ColorOneof_.color_string_;
    _impl_.ColorOneof_.color_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementRectFilled::unsafe_arena_set_allocated_color_string(::proto::ColorString* color_string) {
  clear_ColorOneof();
  if (color_string) {
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = color_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementRectFilled.color_string)
}
inline ::proto::ColorString* PageElementRectFilled::_internal_mutable_color_string() {
  if (!_internal_has_color_string()) {
    clear_ColorOneof();
    set_has_color_string();
    _impl_.ColorOneof_.color_string_ = CreateMaybeMessage< ::proto::ColorString >(GetArenaForAllocation());
  }
  return _impl_.ColorOneof_.color_string_;
}
inline ::proto::ColorString* PageElementRectFilled::mutable_color_string() {
  ::proto::ColorString* _msg = _internal_mutable_color_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementRectFilled.color_string)
  return _msg;
}

// double rounding = 7;
inline void PageElementRectFilled::clear_rounding() {
  _impl_.rounding_ = 0;
}
inline double PageElementRectFilled::_internal_rounding() const {
  return _impl_.rounding_;
}
inline double PageElementRectFilled::rounding() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.rounding)
  return _internal_rounding();
}
inline void PageElementRectFilled::_internal_set_rounding(double value) {
  
  _impl_.rounding_ = value;
}
inline void PageElementRectFilled::set_rounding(double value) {
  _internal_set_rounding(value);
  // @@protoc_insertion_point(field_set:proto.PageElementRectFilled.rounding)
}

// .proto.AlignmentEnum alignment_enum = 8;
inline void PageElementRectFilled::clear_alignment_enum() {
  _impl_.alignment_enum_ = 0;
}
inline ::proto::AlignmentEnum PageElementRectFilled::_internal_alignment_enum() const {
  return static_cast< ::proto::AlignmentEnum >(_impl_.alignment_enum_);
}
inline ::proto::AlignmentEnum PageElementRectFilled::alignment_enum() const {
  // @@protoc_insertion_point(field_get:proto.PageElementRectFilled.alignment_enum)
  return _internal_alignment_enum();
}
inline void PageElementRectFilled::_internal_set_alignment_enum(::proto::AlignmentEnum value) {
  
  _impl_.alignment_enum_ = value;
}
inline void PageElementRectFilled::set_alignment_enum(::proto::AlignmentEnum value) {
  _internal_set_alignment_enum(value);
  // @@protoc_insertion_point(field_set:proto.PageElementRectFilled.alignment_enum)
}

inline bool PageElementRectFilled::has_PositionOneof() const {
  return PositionOneof_case() != POSITIONONEOF_NOT_SET;
}
inline void PageElementRectFilled::clear_has_PositionOneof() {
  _impl_._oneof_case_[0] = POSITIONONEOF_NOT_SET;
}
inline bool PageElementRectFilled::has_SizeOneof() const {
  return SizeOneof_case() != SIZEONEOF_NOT_SET;
}
inline void PageElementRectFilled::clear_has_SizeOneof() {
  _impl_._oneof_case_[1] = SIZEONEOF_NOT_SET;
}
inline bool PageElementRectFilled::has_ColorOneof() const {
  return ColorOneof_case() != COLORONEOF_NOT_SET;
}
inline void PageElementRectFilled::clear_has_ColorOneof() {
  _impl_._oneof_case_[2] = COLORONEOF_NOT_SET;
}
inline PageElementRectFilled::PositionOneofCase PageElementRectFilled::PositionOneof_case() const {
  return PageElementRectFilled::PositionOneofCase(_impl_._oneof_case_[0]);
}
inline PageElementRectFilled::SizeOneofCase PageElementRectFilled::SizeOneof_case() const {
  return PageElementRectFilled::SizeOneofCase(_impl_._oneof_case_[1]);
}
inline PageElementRectFilled::ColorOneofCase PageElementRectFilled::ColorOneof_case() const {
  return PageElementRectFilled::ColorOneofCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// PageElementList

// string element_count = 1;
inline void PageElementList::clear_element_count() {
  _impl_.element_count_.ClearToEmpty();
}
inline const std::string& PageElementList::element_count() const {
  // @@protoc_insertion_point(field_get:proto.PageElementList.element_count)
  return _internal_element_count();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageElementList::set_element_count(ArgT0&& arg0, ArgT... args) {
 
 _impl_.element_count_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PageElementList.element_count)
}
inline std::string* PageElementList::mutable_element_count() {
  std::string* _s = _internal_mutable_element_count();
  // @@protoc_insertion_point(field_mutable:proto.PageElementList.element_count)
  return _s;
}
inline const std::string& PageElementList::_internal_element_count() const {
  return _impl_.element_count_.Get();
}
inline void PageElementList::_internal_set_element_count(const std::string& value) {
  
  _impl_.element_count_.Set(value, GetArenaForAllocation());
}
inline std::string* PageElementList::_internal_mutable_element_count() {
  
  return _impl_.element_count_.Mutable(GetArenaForAllocation());
}
inline std::string* PageElementList::release_element_count() {
  // @@protoc_insertion_point(field_release:proto.PageElementList.element_count)
  return _impl_.element_count_.Release();
}
inline void PageElementList::set_allocated_element_count(std::string* element_count) {
  if (element_count != nullptr) {
    
  } else {
    
  }
  _impl_.element_count_.SetAllocated(element_count, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.element_count_.IsDefault()) {
    _impl_.element_count_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PageElementList.element_count)
}

// string element_index = 2;
inline void PageElementList::clear_element_index() {
  _impl_.element_index_.ClearToEmpty();
}
inline const std::string& PageElementList::element_index() const {
  // @@protoc_insertion_point(field_get:proto.PageElementList.element_index)
  return _internal_element_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageElementList::set_element_index(ArgT0&& arg0, ArgT... args) {
 
 _impl_.element_index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PageElementList.element_index)
}
inline std::string* PageElementList::mutable_element_index() {
  std::string* _s = _internal_mutable_element_index();
  // @@protoc_insertion_point(field_mutable:proto.PageElementList.element_index)
  return _s;
}
inline const std::string& PageElementList::_internal_element_index() const {
  return _impl_.element_index_.Get();
}
inline void PageElementList::_internal_set_element_index(const std::string& value) {
  
  _impl_.element_index_.Set(value, GetArenaForAllocation());
}
inline std::string* PageElementList::_internal_mutable_element_index() {
  
  return _impl_.element_index_.Mutable(GetArenaForAllocation());
}
inline std::string* PageElementList::release_element_index() {
  // @@protoc_insertion_point(field_release:proto.PageElementList.element_index)
  return _impl_.element_index_.Release();
}
inline void PageElementList::set_allocated_element_index(std::string* element_index) {
  if (element_index != nullptr) {
    
  } else {
    
  }
  _impl_.element_index_.SetAllocated(element_index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.element_index_.IsDefault()) {
    _impl_.element_index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PageElementList.element_index)
}

// .proto.Vector2 position = 3;
inline bool PageElementList::_internal_has_position() const {
  return PositionOneof_case() == kPosition;
}
inline bool PageElementList::has_position() const {
  return _internal_has_position();
}
inline void PageElementList::set_has_position() {
  _impl_._oneof_case_[0] = kPosition;
}
inline ::proto::Vector2* PageElementList::release_position() {
  // @@protoc_insertion_point(field_release:proto.PageElementList.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementList::_internal_position() const {
  return _internal_has_position()
      ? *_impl_.PositionOneof_.position_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementList::position() const {
  // @@protoc_insertion_point(field_get:proto.PageElementList.position)
  return _internal_position();
}
inline ::proto::Vector2* PageElementList::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementList.position)
  if (_internal_has_position()) {
    clear_has_PositionOneof();
    ::proto::Vector2* temp = _impl_.PositionOneof_.position_;
    _impl_.PositionOneof_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementList::unsafe_arena_set_allocated_position(::proto::Vector2* position) {
  clear_PositionOneof();
  if (position) {
    set_has_position();
    _impl_.PositionOneof_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementList.position)
}
inline ::proto::Vector2* PageElementList::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_PositionOneof();
    set_has_position();
    _impl_.PositionOneof_.position_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_;
}
inline ::proto::Vector2* PageElementList::mutable_position() {
  ::proto::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.PageElementList.position)
  return _msg;
}

// .proto.Vector2String position_string = 4;
inline bool PageElementList::_internal_has_position_string() const {
  return PositionOneof_case() == kPositionString;
}
inline bool PageElementList::has_position_string() const {
  return _internal_has_position_string();
}
inline void PageElementList::set_has_position_string() {
  _impl_._oneof_case_[0] = kPositionString;
}
inline void PageElementList::clear_position_string() {
  if (_internal_has_position_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PositionOneof_.position_string_;
    }
    clear_has_PositionOneof();
  }
}
inline ::proto::Vector2String* PageElementList::release_position_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementList.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementList::_internal_position_string() const {
  return _internal_has_position_string()
      ? *_impl_.PositionOneof_.position_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementList::position_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementList.position_string)
  return _internal_position_string();
}
inline ::proto::Vector2String* PageElementList::unsafe_arena_release_position_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementList.position_string)
  if (_internal_has_position_string()) {
    clear_has_PositionOneof();
    ::proto::Vector2String* temp = _impl_.PositionOneof_.position_string_;
    _impl_.PositionOneof_.position_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementList::unsafe_arena_set_allocated_position_string(::proto::Vector2String* position_string) {
  clear_PositionOneof();
  if (position_string) {
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = position_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementList.position_string)
}
inline ::proto::Vector2String* PageElementList::_internal_mutable_position_string() {
  if (!_internal_has_position_string()) {
    clear_PositionOneof();
    set_has_position_string();
    _impl_.PositionOneof_.position_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.PositionOneof_.position_string_;
}
inline ::proto::Vector2String* PageElementList::mutable_position_string() {
  ::proto::Vector2String* _msg = _internal_mutable_position_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementList.position_string)
  return _msg;
}

// .proto.Vector2 size = 5;
inline bool PageElementList::_internal_has_size() const {
  return SizeOneof_case() == kSize;
}
inline bool PageElementList::has_size() const {
  return _internal_has_size();
}
inline void PageElementList::set_has_size() {
  _impl_._oneof_case_[1] = kSize;
}
inline ::proto::Vector2* PageElementList::release_size() {
  // @@protoc_insertion_point(field_release:proto.PageElementList.size)
  if (_internal_has_size()) {
    clear_has_SizeOneof();
    ::proto::Vector2* temp = _impl_.SizeOneof_.size_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SizeOneof_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2& PageElementList::_internal_size() const {
  return _internal_has_size()
      ? *_impl_.SizeOneof_.size_
      : reinterpret_cast< ::proto::Vector2&>(::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageElementList::size() const {
  // @@protoc_insertion_point(field_get:proto.PageElementList.size)
  return _internal_size();
}
inline ::proto::Vector2* PageElementList::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementList.size)
  if (_internal_has_size()) {
    clear_has_SizeOneof();
    ::proto::Vector2* temp = _impl_.SizeOneof_.size_;
    _impl_.SizeOneof_.size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementList::unsafe_arena_set_allocated_size(::proto::Vector2* size) {
  clear_SizeOneof();
  if (size) {
    set_has_size();
    _impl_.SizeOneof_.size_ = size;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementList.size)
}
inline ::proto::Vector2* PageElementList::_internal_mutable_size() {
  if (!_internal_has_size()) {
    clear_SizeOneof();
    set_has_size();
    _impl_.SizeOneof_.size_ = CreateMaybeMessage< ::proto::Vector2 >(GetArenaForAllocation());
  }
  return _impl_.SizeOneof_.size_;
}
inline ::proto::Vector2* PageElementList::mutable_size() {
  ::proto::Vector2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:proto.PageElementList.size)
  return _msg;
}

// .proto.Vector2String size_string = 6;
inline bool PageElementList::_internal_has_size_string() const {
  return SizeOneof_case() == kSizeString;
}
inline bool PageElementList::has_size_string() const {
  return _internal_has_size_string();
}
inline void PageElementList::set_has_size_string() {
  _impl_._oneof_case_[1] = kSizeString;
}
inline void PageElementList::clear_size_string() {
  if (_internal_has_size_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SizeOneof_.size_string_;
    }
    clear_has_SizeOneof();
  }
}
inline ::proto::Vector2String* PageElementList::release_size_string() {
  // @@protoc_insertion_point(field_release:proto.PageElementList.size_string)
  if (_internal_has_size_string()) {
    clear_has_SizeOneof();
    ::proto::Vector2String* temp = _impl_.SizeOneof_.size_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SizeOneof_.size_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::Vector2String& PageElementList::_internal_size_string() const {
  return _internal_has_size_string()
      ? *_impl_.SizeOneof_.size_string_
      : reinterpret_cast< ::proto::Vector2String&>(::proto::_Vector2String_default_instance_);
}
inline const ::proto::Vector2String& PageElementList::size_string() const {
  // @@protoc_insertion_point(field_get:proto.PageElementList.size_string)
  return _internal_size_string();
}
inline ::proto::Vector2String* PageElementList::unsafe_arena_release_size_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElementList.size_string)
  if (_internal_has_size_string()) {
    clear_has_SizeOneof();
    ::proto::Vector2String* temp = _impl_.SizeOneof_.size_string_;
    _impl_.SizeOneof_.size_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElementList::unsafe_arena_set_allocated_size_string(::proto::Vector2String* size_string) {
  clear_SizeOneof();
  if (size_string) {
    set_has_size_string();
    _impl_.SizeOneof_.size_string_ = size_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElementList.size_string)
}
inline ::proto::Vector2String* PageElementList::_internal_mutable_size_string() {
  if (!_internal_has_size_string()) {
    clear_SizeOneof();
    set_has_size_string();
    _impl_.SizeOneof_.size_string_ = CreateMaybeMessage< ::proto::Vector2String >(GetArenaForAllocation());
  }
  return _impl_.SizeOneof_.size_string_;
}
inline ::proto::Vector2String* PageElementList::mutable_size_string() {
  ::proto::Vector2String* _msg = _internal_mutable_size_string();
  // @@protoc_insertion_point(field_mutable:proto.PageElementList.size_string)
  return _msg;
}

// repeated .proto.PageElement page_elements = 7;
inline int PageElementList::_internal_page_elements_size() const {
  return _impl_.page_elements_.size();
}
inline int PageElementList::page_elements_size() const {
  return _internal_page_elements_size();
}
inline void PageElementList::clear_page_elements() {
  _impl_.page_elements_.Clear();
}
inline ::proto::PageElement* PageElementList::mutable_page_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PageElementList.page_elements)
  return _impl_.page_elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >*
PageElementList::mutable_page_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.PageElementList.page_elements)
  return &_impl_.page_elements_;
}
inline const ::proto::PageElement& PageElementList::_internal_page_elements(int index) const {
  return _impl_.page_elements_.Get(index);
}
inline const ::proto::PageElement& PageElementList::page_elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.PageElementList.page_elements)
  return _internal_page_elements(index);
}
inline ::proto::PageElement* PageElementList::_internal_add_page_elements() {
  return _impl_.page_elements_.Add();
}
inline ::proto::PageElement* PageElementList::add_page_elements() {
  ::proto::PageElement* _add = _internal_add_page_elements();
  // @@protoc_insertion_point(field_add:proto.PageElementList.page_elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >&
PageElementList::page_elements() const {
  // @@protoc_insertion_point(field_list:proto.PageElementList.page_elements)
  return _impl_.page_elements_;
}

inline bool PageElementList::has_PositionOneof() const {
  return PositionOneof_case() != POSITIONONEOF_NOT_SET;
}
inline void PageElementList::clear_has_PositionOneof() {
  _impl_._oneof_case_[0] = POSITIONONEOF_NOT_SET;
}
inline bool PageElementList::has_SizeOneof() const {
  return SizeOneof_case() != SIZEONEOF_NOT_SET;
}
inline void PageElementList::clear_has_SizeOneof() {
  _impl_._oneof_case_[1] = SIZEONEOF_NOT_SET;
}
inline PageElementList::PositionOneofCase PageElementList::PositionOneof_case() const {
  return PageElementList::PositionOneofCase(_impl_._oneof_case_[0]);
}
inline PageElementList::SizeOneofCase PageElementList::SizeOneof_case() const {
  return PageElementList::SizeOneofCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// PageElement

// .proto.PageElementText text = 1;
inline bool PageElement::_internal_has_text() const {
  return PageElementOneof_case() == kText;
}
inline bool PageElement::has_text() const {
  return _internal_has_text();
}
inline void PageElement::set_has_text() {
  _impl_._oneof_case_[0] = kText;
}
inline void PageElement::clear_text() {
  if (_internal_has_text()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PageElementOneof_.text_;
    }
    clear_has_PageElementOneof();
  }
}
inline ::proto::PageElementText* PageElement::release_text() {
  // @@protoc_insertion_point(field_release:proto.PageElement.text)
  if (_internal_has_text()) {
    clear_has_PageElementOneof();
    ::proto::PageElementText* temp = _impl_.PageElementOneof_.text_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PageElementOneof_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::PageElementText& PageElement::_internal_text() const {
  return _internal_has_text()
      ? *_impl_.PageElementOneof_.text_
      : reinterpret_cast< ::proto::PageElementText&>(::proto::_PageElementText_default_instance_);
}
inline const ::proto::PageElementText& PageElement::text() const {
  // @@protoc_insertion_point(field_get:proto.PageElement.text)
  return _internal_text();
}
inline ::proto::PageElementText* PageElement::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElement.text)
  if (_internal_has_text()) {
    clear_has_PageElementOneof();
    ::proto::PageElementText* temp = _impl_.PageElementOneof_.text_;
    _impl_.PageElementOneof_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElement::unsafe_arena_set_allocated_text(::proto::PageElementText* text) {
  clear_PageElementOneof();
  if (text) {
    set_has_text();
    _impl_.PageElementOneof_.text_ = text;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElement.text)
}
inline ::proto::PageElementText* PageElement::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_PageElementOneof();
    set_has_text();
    _impl_.PageElementOneof_.text_ = CreateMaybeMessage< ::proto::PageElementText >(GetArenaForAllocation());
  }
  return _impl_.PageElementOneof_.text_;
}
inline ::proto::PageElementText* PageElement::mutable_text() {
  ::proto::PageElementText* _msg = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:proto.PageElement.text)
  return _msg;
}

// .proto.PageElementImage image = 2;
inline bool PageElement::_internal_has_image() const {
  return PageElementOneof_case() == kImage;
}
inline bool PageElement::has_image() const {
  return _internal_has_image();
}
inline void PageElement::set_has_image() {
  _impl_._oneof_case_[0] = kImage;
}
inline void PageElement::clear_image() {
  if (_internal_has_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PageElementOneof_.image_;
    }
    clear_has_PageElementOneof();
  }
}
inline ::proto::PageElementImage* PageElement::release_image() {
  // @@protoc_insertion_point(field_release:proto.PageElement.image)
  if (_internal_has_image()) {
    clear_has_PageElementOneof();
    ::proto::PageElementImage* temp = _impl_.PageElementOneof_.image_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PageElementOneof_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::PageElementImage& PageElement::_internal_image() const {
  return _internal_has_image()
      ? *_impl_.PageElementOneof_.image_
      : reinterpret_cast< ::proto::PageElementImage&>(::proto::_PageElementImage_default_instance_);
}
inline const ::proto::PageElementImage& PageElement::image() const {
  // @@protoc_insertion_point(field_get:proto.PageElement.image)
  return _internal_image();
}
inline ::proto::PageElementImage* PageElement::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElement.image)
  if (_internal_has_image()) {
    clear_has_PageElementOneof();
    ::proto::PageElementImage* temp = _impl_.PageElementOneof_.image_;
    _impl_.PageElementOneof_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElement::unsafe_arena_set_allocated_image(::proto::PageElementImage* image) {
  clear_PageElementOneof();
  if (image) {
    set_has_image();
    _impl_.PageElementOneof_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElement.image)
}
inline ::proto::PageElementImage* PageElement::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_PageElementOneof();
    set_has_image();
    _impl_.PageElementOneof_.image_ = CreateMaybeMessage< ::proto::PageElementImage >(GetArenaForAllocation());
  }
  return _impl_.PageElementOneof_.image_;
}
inline ::proto::PageElementImage* PageElement::mutable_image() {
  ::proto::PageElementImage* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:proto.PageElement.image)
  return _msg;
}

// .proto.PageElementLine line = 3;
inline bool PageElement::_internal_has_line() const {
  return PageElementOneof_case() == kLine;
}
inline bool PageElement::has_line() const {
  return _internal_has_line();
}
inline void PageElement::set_has_line() {
  _impl_._oneof_case_[0] = kLine;
}
inline void PageElement::clear_line() {
  if (_internal_has_line()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PageElementOneof_.line_;
    }
    clear_has_PageElementOneof();
  }
}
inline ::proto::PageElementLine* PageElement::release_line() {
  // @@protoc_insertion_point(field_release:proto.PageElement.line)
  if (_internal_has_line()) {
    clear_has_PageElementOneof();
    ::proto::PageElementLine* temp = _impl_.PageElementOneof_.line_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PageElementOneof_.line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::PageElementLine& PageElement::_internal_line() const {
  return _internal_has_line()
      ? *_impl_.PageElementOneof_.line_
      : reinterpret_cast< ::proto::PageElementLine&>(::proto::_PageElementLine_default_instance_);
}
inline const ::proto::PageElementLine& PageElement::line() const {
  // @@protoc_insertion_point(field_get:proto.PageElement.line)
  return _internal_line();
}
inline ::proto::PageElementLine* PageElement::unsafe_arena_release_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElement.line)
  if (_internal_has_line()) {
    clear_has_PageElementOneof();
    ::proto::PageElementLine* temp = _impl_.PageElementOneof_.line_;
    _impl_.PageElementOneof_.line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElement::unsafe_arena_set_allocated_line(::proto::PageElementLine* line) {
  clear_PageElementOneof();
  if (line) {
    set_has_line();
    _impl_.PageElementOneof_.line_ = line;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElement.line)
}
inline ::proto::PageElementLine* PageElement::_internal_mutable_line() {
  if (!_internal_has_line()) {
    clear_PageElementOneof();
    set_has_line();
    _impl_.PageElementOneof_.line_ = CreateMaybeMessage< ::proto::PageElementLine >(GetArenaForAllocation());
  }
  return _impl_.PageElementOneof_.line_;
}
inline ::proto::PageElementLine* PageElement::mutable_line() {
  ::proto::PageElementLine* _msg = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:proto.PageElement.line)
  return _msg;
}

// .proto.PageElementRectFilled rect_filled = 4;
inline bool PageElement::_internal_has_rect_filled() const {
  return PageElementOneof_case() == kRectFilled;
}
inline bool PageElement::has_rect_filled() const {
  return _internal_has_rect_filled();
}
inline void PageElement::set_has_rect_filled() {
  _impl_._oneof_case_[0] = kRectFilled;
}
inline void PageElement::clear_rect_filled() {
  if (_internal_has_rect_filled()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PageElementOneof_.rect_filled_;
    }
    clear_has_PageElementOneof();
  }
}
inline ::proto::PageElementRectFilled* PageElement::release_rect_filled() {
  // @@protoc_insertion_point(field_release:proto.PageElement.rect_filled)
  if (_internal_has_rect_filled()) {
    clear_has_PageElementOneof();
    ::proto::PageElementRectFilled* temp = _impl_.PageElementOneof_.rect_filled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PageElementOneof_.rect_filled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::PageElementRectFilled& PageElement::_internal_rect_filled() const {
  return _internal_has_rect_filled()
      ? *_impl_.PageElementOneof_.rect_filled_
      : reinterpret_cast< ::proto::PageElementRectFilled&>(::proto::_PageElementRectFilled_default_instance_);
}
inline const ::proto::PageElementRectFilled& PageElement::rect_filled() const {
  // @@protoc_insertion_point(field_get:proto.PageElement.rect_filled)
  return _internal_rect_filled();
}
inline ::proto::PageElementRectFilled* PageElement::unsafe_arena_release_rect_filled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElement.rect_filled)
  if (_internal_has_rect_filled()) {
    clear_has_PageElementOneof();
    ::proto::PageElementRectFilled* temp = _impl_.PageElementOneof_.rect_filled_;
    _impl_.PageElementOneof_.rect_filled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElement::unsafe_arena_set_allocated_rect_filled(::proto::PageElementRectFilled* rect_filled) {
  clear_PageElementOneof();
  if (rect_filled) {
    set_has_rect_filled();
    _impl_.PageElementOneof_.rect_filled_ = rect_filled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElement.rect_filled)
}
inline ::proto::PageElementRectFilled* PageElement::_internal_mutable_rect_filled() {
  if (!_internal_has_rect_filled()) {
    clear_PageElementOneof();
    set_has_rect_filled();
    _impl_.PageElementOneof_.rect_filled_ = CreateMaybeMessage< ::proto::PageElementRectFilled >(GetArenaForAllocation());
  }
  return _impl_.PageElementOneof_.rect_filled_;
}
inline ::proto::PageElementRectFilled* PageElement::mutable_rect_filled() {
  ::proto::PageElementRectFilled* _msg = _internal_mutable_rect_filled();
  // @@protoc_insertion_point(field_mutable:proto.PageElement.rect_filled)
  return _msg;
}

// .proto.PageElementList list = 5;
inline bool PageElement::_internal_has_list() const {
  return PageElementOneof_case() == kList;
}
inline bool PageElement::has_list() const {
  return _internal_has_list();
}
inline void PageElement::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void PageElement::clear_list() {
  if (_internal_has_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.PageElementOneof_.list_;
    }
    clear_has_PageElementOneof();
  }
}
inline ::proto::PageElementList* PageElement::release_list() {
  // @@protoc_insertion_point(field_release:proto.PageElement.list)
  if (_internal_has_list()) {
    clear_has_PageElementOneof();
    ::proto::PageElementList* temp = _impl_.PageElementOneof_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.PageElementOneof_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::PageElementList& PageElement::_internal_list() const {
  return _internal_has_list()
      ? *_impl_.PageElementOneof_.list_
      : reinterpret_cast< ::proto::PageElementList&>(::proto::_PageElementList_default_instance_);
}
inline const ::proto::PageElementList& PageElement::list() const {
  // @@protoc_insertion_point(field_get:proto.PageElement.list)
  return _internal_list();
}
inline ::proto::PageElementList* PageElement::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.PageElement.list)
  if (_internal_has_list()) {
    clear_has_PageElementOneof();
    ::proto::PageElementList* temp = _impl_.PageElementOneof_.list_;
    _impl_.PageElementOneof_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PageElement::unsafe_arena_set_allocated_list(::proto::PageElementList* list) {
  clear_PageElementOneof();
  if (list) {
    set_has_list();
    _impl_.PageElementOneof_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageElement.list)
}
inline ::proto::PageElementList* PageElement::_internal_mutable_list() {
  if (!_internal_has_list()) {
    clear_PageElementOneof();
    set_has_list();
    _impl_.PageElementOneof_.list_ = CreateMaybeMessage< ::proto::PageElementList >(GetArenaForAllocation());
  }
  return _impl_.PageElementOneof_.list_;
}
inline ::proto::PageElementList* PageElement::mutable_list() {
  ::proto::PageElementList* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:proto.PageElement.list)
  return _msg;
}

inline bool PageElement::has_PageElementOneof() const {
  return PageElementOneof_case() != PAGEELEMENTONEOF_NOT_SET;
}
inline void PageElement::clear_has_PageElementOneof() {
  _impl_._oneof_case_[0] = PAGEELEMENTONEOF_NOT_SET;
}
inline PageElement::PageElementOneofCase PageElement::PageElementOneof_case() const {
  return PageElement::PageElementOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PageDescription

// string name = 1;
inline void PageDescription::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PageDescription::name() const {
  // @@protoc_insertion_point(field_get:proto.PageDescription.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageDescription::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PageDescription.name)
}
inline std::string* PageDescription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.PageDescription.name)
  return _s;
}
inline const std::string& PageDescription::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PageDescription::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PageDescription::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PageDescription::release_name() {
  // @@protoc_insertion_point(field_release:proto.PageDescription.name)
  return _impl_.name_.Release();
}
inline void PageDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PageDescription.name)
}

// .proto.Vector2 size = 2;
inline bool PageDescription::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool PageDescription::has_size() const {
  return _internal_has_size();
}
inline const ::proto::Vector2& PageDescription::_internal_size() const {
  const ::proto::Vector2* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector2&>(
      ::proto::_Vector2_default_instance_);
}
inline const ::proto::Vector2& PageDescription::size() const {
  // @@protoc_insertion_point(field_get:proto.PageDescription.size)
  return _internal_size();
}
inline void PageDescription::unsafe_arena_set_allocated_size(
    ::proto::Vector2* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PageDescription.size)
}
inline ::proto::Vector2* PageDescription::release_size() {
  
  ::proto::Vector2* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector2* PageDescription::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:proto.PageDescription.size)
  
  ::proto::Vector2* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::proto::Vector2* PageDescription::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector2>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::proto::Vector2* PageDescription::mutable_size() {
  ::proto::Vector2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:proto.PageDescription.size)
  return _msg;
}
inline void PageDescription::set_allocated_size(::proto::Vector2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:proto.PageDescription.size)
}

// repeated .proto.PageElement page_elements = 3;
inline int PageDescription::_internal_page_elements_size() const {
  return _impl_.page_elements_.size();
}
inline int PageDescription::page_elements_size() const {
  return _internal_page_elements_size();
}
inline void PageDescription::clear_page_elements() {
  _impl_.page_elements_.Clear();
}
inline ::proto::PageElement* PageDescription::mutable_page_elements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PageDescription.page_elements)
  return _impl_.page_elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >*
PageDescription::mutable_page_elements() {
  // @@protoc_insertion_point(field_mutable_list:proto.PageDescription.page_elements)
  return &_impl_.page_elements_;
}
inline const ::proto::PageElement& PageDescription::_internal_page_elements(int index) const {
  return _impl_.page_elements_.Get(index);
}
inline const ::proto::PageElement& PageDescription::page_elements(int index) const {
  // @@protoc_insertion_point(field_get:proto.PageDescription.page_elements)
  return _internal_page_elements(index);
}
inline ::proto::PageElement* PageDescription::_internal_add_page_elements() {
  return _impl_.page_elements_.Add();
}
inline ::proto::PageElement* PageDescription::add_page_elements() {
  ::proto::PageElement* _add = _internal_add_page_elements();
  // @@protoc_insertion_point(field_add:proto.PageDescription.page_elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PageElement >&
PageDescription::page_elements() const {
  // @@protoc_insertion_point(field_list:proto.PageDescription.page_elements)
  return _impl_.page_elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::TextSizeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::TextSizeEnum>() {
  return ::proto::TextSizeEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::AlignmentEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::AlignmentEnum>() {
  return ::proto::AlignmentEnum_descriptor();
}
template <> struct is_proto_enum< ::proto::DecorationEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DecorationEnum>() {
  return ::proto::DecorationEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fparameter_2eproto
